var data = require("./restlet-data.js");

var commons = require("./commons.js");
//var libxmljs = require("libxmljs");
var xmldom = require("xmldom");

var Variant = new commons.Class({
	initialize: function(mediaType, language) {
        this.characterSet = null;
        this.encodings = null;

        if (language != null) {
            this.getLanguages().add(language);
        } else {
            this.languages = null;
        }

        this.mediaType = mediaType;
        this.locationRef = null;
	},
	setMediaType: function(mediaType) {
		this.mediaType = mediaType;
	},
	getMediaType: function() {
		return this.mediaType;
	},
	getCharacterSet: function() {
		return this.characterSet;
	},
	setCharacterSet: function(characterSet) {
		this.characterSet = characterSet;
	},
	getEncodings: function() {
		if (this.encodings==null) {
			this.encodings = [];
		}
		return this.encodings;
	},
	setEncodings: function(encodings) {
		this.encodings = encodings;
	},
	getLocationRef: function() {
		return this.locationRef;
	},
	setLocationRef: function(locationRef) {
		this.locationRef = locationRef;
	},
    getLanguages: function() {
		if (this.languages==null) {
			this.languages = [];
		}
		return this.languages;
	},
	setLanguages: function(languages) {
		this.languages = languages;
	}
});

var RepresentationInfo = new commons.Class(Variant, {
    getModificationDate: function() {
    	return this.modificationDate;
    },
    setModificationDate: function(date) {
    	this.modificationDate = date;
    },
    getTag: function() {
    	return this.tag;
    },
    setTag: function(tag) {
    	this.tag = tag;
    }
});

var Representation = new commons.Class(RepresentationInfo, {
	initialize: function() {
	},
    isAvailable: function() {
    	return this.available && (this.getSize() != 0);
    },
    setAvailable: function(available) {
    	this.available = available;
    },
    getAvailableSize: function() {
    	return this.getSize();
    },
    getDisposition: function() {
    	return this.disposition;
    },
    setDisposition: function(disposition) {
    	this.disposition = disposition;
    },
    getExpirationDate: function() {
    	return this.expirationDate;
    },
    setExpirationDate: function(expirationDate) {
    	this.expirationDate = expirationDate;
    },
    getIsTransient: function() {
    	return this.isTransient;
    },
    setIsTransient: function(isTransient) {
    	this.isTransient = isTransient;
    },
    getRange: function() {
    	return this.range;
    },
    setRange: function(range) {
    	this.range = range;
    },
    getSize: function() {
    	return this.size;
    },
    setSize: function(size) {
    	this.size = size;
    },
    getTag: function() {
    	return this.tag;
    },
    setTag: function(tag) {
    	this.tag = tag;
    },
    getText: function() {
		return this.text;
	},
	getXml: function() {
		return this.xml;
	},
	write: function(content) {
		if (typeof content=="string") {
			this.text = content;
			this.setSize(this.text.length);
			this.setAvailable(true);
			this.xml = content;
			this.setAvailable(true);
		} else {
			this.text = content.responseText;
			this.setSize(this.text.length);
			this.setAvailable(true);
			this.xml = content.responseXML;
		}
	},
	release: function() {
        this.setAvailable(false);
    },
    hasKnownSize: function() {
        return this.getSize() >= 0;
    },
    isEmpty: function() {
        return this.getSize() == 0;
    }
});

Representation.extend({
	UNKNOWN_SIZE: -1
});

var EmptyRepresentation = new commons.Class(Representation, { 
	initialize: function(content) {
		
	},
	
	getText: function() {
		return null;
	}
});

var JsonRepresentation = new commons.Class(Representation, { 
	initialize: function(content) {
		if (typeof this.text == "undefined") {
			this.text = null;
		}
		this.obj = null;
		this.representation = null;
		if (typeof content == "string") {
			this.text = content;
			this.setSize(this.text.length);
			this.setAvailable(true);
			this.obj = JSON.parse(this.text);
			this.text = JSON.stringify(this.obj);
		} else if (content instanceof Representation) {
			this.representation = content;
			this.obj = JSON.parse(this.representation.getText());
			this.setAvailable(true);
		} else if (typeof content == "object") {
			this.obj = content;
			this.text = JSON.stringify(this.obj);
			this.setSize(this.text.length);
			this.setAvailable(true);
		}
		this.setMediaType(data.MediaType.APPLICATION_JSON);
	},
	getText: function() {
		return this.text;
	},
    getAvailableSize: function() {
        return this.getText().length;
    },
	setObject: function(obj) {
		this.obj = obj
	},
	getObject: function() {
		return this.obj; 
	}
});

var DomRepresentation = new commons.Class(Representation, { 
	initialize: function(content) {
		if (typeof this.text == "undefined") {
			this.text = null;
		}
		if (typeof this.xml == "undefined") {
			this.xml = null;
		}
		this.representation = null;
		if (typeof content == "string") {
			this.text = content;
			this.setSize(this.text.length);
			this.setAvailable(true);
		} else if (content instanceof Representation) {
			this.representation = content;
			this.text = this.representation.getText();
			this.setAvailable(this.representation.isAvailable());
		} else if (typeof content == "object") {
			this.xml = content;
		/*var text = this.getText();
		this.setSize(text.length);*/
		this.setSize(Representation.UNKNOWN_SIZE);
		this.setAvailable(true);
		}
		this.setMediaType(data.MediaType.APPLICATION_XML);
	},
	getText: function() {
		if (this.xml!=null) {
			return new xmldom.XMLSerializer().serializeToString(this.xml);
		}
		return "";
	},
	getXml: function() {
		if (this.representation!=null) {
			return new xmldom.DOMParser().parseFromString(this.representation.getText());
		} else if (this.text!=null) {
			return new xmldom.DOMParser().parseFromString(this.text, "text/xml");
		} else {
			return this.xml;
		}
	}
});

var StringRepresentation = new commons.Class(Representation, {
	initialize: function(text, mediaType, language, characterSet) {
        this.callSuperCstr(mediaType);
        this.setMediaType(mediaType);
        if (language != null) {
            this.getLanguages().add(language);
        }

        this.setCharacterSet(characterSet);
        this.write(text);
	},

	getText: function() {
		return this.text;
	},

	release: function() {
		this.setText(null);
        this.setAvailable(false);
	},

	setCharacterSet: function(characterSet) {
		this.characterSet = characterSet;
		this.updateSize();
	},

	setText: function(text) {
		this.text = text;
		this.updateSize();
		this.available = true;
	},

	toString: function() {
		return this.getText();
	},

	updateSize: function() {
		if (this.getText() != null) {
			this.setSize(this.getText().length);
		} else {
			this.setSize(Representation.UNKNOWN_SIZE);
		}
	}
});



var JadeRepresentation = new commons.Class(Representation, { 
	initialize: function(templateName, content, mediaType) {
		var jade = require('jade');
		var path = require("path");
		var fs = require("fs");
		
		this.mediaType = mediaType;

		// Compile a function
		var str = fs.readFileSync(templateName, 'utf8');
		var options = {};
		this.fn = jade.compile(str, options);
		this.write(this.fn(content));
	}
});

module.exports = {
	Variant: Variant,
	RepresentationInfo: RepresentationInfo,
	Representation: Representation,
	EmptyRepresentation: EmptyRepresentation,
	JsonRepresentation: JsonRepresentation,
	DomRepresentation: DomRepresentation,
	StringRepresentation: StringRepresentation,
	JadeRepresentation: JadeRepresentation
};