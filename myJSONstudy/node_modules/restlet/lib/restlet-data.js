var util = require("./restlet-util.js");
var core = require("./restlet-core.js");

var commons = require("./commons.js");
var url = require("url");

var Protocol = new commons.Class({
	initialize: function(schemeName,name,technicalName,description,
						defaultPort,confidential,version) {
		this.schemeName = schemeName;
		this.name = name;
		this.technicalName = technicalName;
        this.description = description;
        this.defaultPort = defaultPort;
        this.confidential = confidential;
        this.version = version;
	},
	
    equals: function(object) {
        return (object instanceof Protocol)
                && this.getName().equalsIgnoreCase(this.getName());
    },

    getDefaultPort: function() {
        return this.defaultPort;
    },

    getDescription: function() {
        return this.description;
    },

    getName: function() {
        return this.name;
    },

    getSchemeName: function() {
        return this.schemeName;
    },

    getTechnicalName: function() {
        return this.technicalName;
    },

    getVersion: function() {
        return this.version;
    },

    isConfidential: function() {
        return this.confidential;
    },

    toString: function() {
        return this.getName() + ((this.getVersion() == null) ? "" : "/" + this.getVersion());
    }
});

Protocol.extend({
	HTTP: new Protocol("http", "HTTP",
        "HyperText Transport Protocol", 80, false, "1.1"),
    HTTPS: new Protocol("https", "HTTPS", "HTTP",
        "HyperText Transport Protocol (Secure)", 443, true, "1.1"),

	valueOf: function(name) {
        var result = null;

        if ((name != null) && !name.equals("")) {
            /*if (name.equalsIgnoreCase(Protocol.AJP.getSchemeName())) {
                result = AJP;
            } else if (name.equalsIgnoreCase(Protocol.CLAP.getSchemeName())) {
                result = CLAP;
            } else if (name.equalsIgnoreCase(Protocol.FILE.getSchemeName())) {
                result = FILE;
            } else if (name.equalsIgnoreCase(Protocol.FTP.getSchemeName())) {
                result = FTP;
            } else */if (name.equalsIgnoreCase(Protocol.HTTP.getSchemeName())) {
                result = Protocol.HTTP;
            } else if (name.equalsIgnoreCase(Protocol.HTTPS.getSchemeName())) {
                result = Protocol.HTTPS;
            /*} else if (name.equalsIgnoreCase(Protocol.JAR.getSchemeName())) {
                result = JAR;
            } else if (name.equalsIgnoreCase(Protocol.JDBC.getSchemeName())) {
                result = JDBC;
            } else if (name.equalsIgnoreCase(Protocol.POP.getSchemeName())) {
                result = POP;
            } else if (name.equalsIgnoreCase(Protocol.POPS.getSchemeName())) {
                result = POPS;
            } else if (name.equalsIgnoreCase(Protocol.RIAP.getSchemeName())) {
                result = RIAP;
            } else if (name.equalsIgnoreCase(Protocol.SMTP.getSchemeName())) {
                result = SMTP;
            } else if (name.equalsIgnoreCase(Protocol.SMTPS.getSchemeName())) {
                result = SMTPS;
            } else if (name.equalsIgnoreCase(Protocol.SIP.getSchemeName())) {
                result = SIP;
            } else if (name.equalsIgnoreCase(Protocol.SIPS.getSchemeName())) {
                result = SIPS;
            } else if (name.equalsIgnoreCase(Protocol.ZIP.getSchemeName())) {
                result = ZIP;*/
            } else {
                result = new Protocol(name);
            }
        }

        return result;
    }
});

var ClientInfo = new commons.Class({
	initialize: function() {
        this.address = null;
        this.agent = null;
        this.port = -1;
        this.acceptedCharacterSets = [];
        this.acceptedEncodings = [];
        this.acceptedLanguages = [];
		this.acceptedMediaTypes = [];
		if (arguments.length==1 && arguments[0] instanceof MediaType) {
			this.acceptedMediaTypes.push(new Preference(arguments[0]));
		}
        this.forwardedAddresses = [];
        this.from = null;

        //private volatile Map<String, String> agentAttributes;
        //private volatile Product agentMainProduct;
        //private volatile List<Product> agentProducts;
        this.authenticated = false;
        //private volatile List<java.security.cert.Certificate> certificates;
        //private volatile String cipherSuite;
        this.expectations = [];
        //private volatile List<java.security.Principal> principals;
        //private volatile List<org.restlet.security.Role> roles;
        //private volatile org.restlet.security.User user;
	},
	
	accept: function() {
		if (arguments.length==1) {
			_acceptList.accept(arguments[0]);
		} else if (arguments.length==2) {
			_acceptSingleElement.accept(arguments[0], arguments[1]);
		}
	},
	
    _acceptList: function(metadata) {
        if (metadata != null) {
            for (var i=0;i<metadata.length;i++) {
            	var md = metadata[i]; 
                this._acceptSingleElement(md, 1.0);
            }
        }
    },

    _acceptSingleElement: function(metadata, quality) {
        if (metadata instanceof MediaType) {
            this.getAcceptedMediaTypes().add(
                    new Preference(metadata, quality));
        } else if (metadata instanceof Language) {
        	this.getAcceptedLanguages().add(
                    new Preference(metadata, quality));
        } else if (metadata instanceof Encoding) {
        	this.getAcceptedEncodings().add(
                    new Preference(metadata, quality));
        } else {
        	this.getAcceptedCharacterSets().add(
                    new Preference(metadata, quality));
        }
    },
    
    getAddress: function() {
		return this.address;
	},
    setAddress: function(address) {
		this.address = address;
	},
	getAgent: function() {
		return this.agent;
	},
	setAgent: function(agent) {
		this.agent = agent;
	},
	getPort: function() {
		return this.port;
	},
	setPort: function(port) {
		this.port = port;
	},
	getAcceptedCharacterSets: function() {
		return this.acceptedCharacterSets;
	},
	setAcceptedCharacterSets: function(acceptedCharacterSets) {
		this.acceptedCharacterSets = acceptedCharacterSets;
	},
	getAcceptedEncodings: function() {
		return this.acceptedEncodings;
	},
	setAcceptedEncodings: function(acceptedEncodings) {
		this.acceptedEncodings = acceptedEncodings;
	},
	getAcceptedLanguages: function() {
		return this.acceptedLanguages;
	},
	setAcceptedLanguages: function(acceptedLanguages) {
		this.acceptedLanguages = acceptedLanguages;
	},
	getAcceptedMediaTypes: function() {
		return this.acceptedMediaTypes;
	},
	setAcceptedMediaTypes: function(acceptedMediaTypes) {
		this.acceptedMediaTypes = acceptedMediaTypes;
	},
	getForwardedAddresses: function() {
		return this.forwardedAddresses;
	},
	setForwardedAddresses: function(forwardedAddresses) {
		this.forwardedAddresses = forwardedAddresses;
	},
    getExpectations: function() {
    	return this.expectations;
    },
    setExpectations: function(expectations) {
    	this.expectations = expectations;
    },
	getFrom: function() {
	    return this.from;
	},
	setFrom: function(from) {
	    this.from = from;
	}
});

var ServerInfo =new commons.Class({
    initialize: function() {
        this.address = null;
        this.agent = null;
        this.port = -1;
        this.acceptingRanges = false;
    },
	isAcceptingRanges: function() {
		return this.acceptingRanges;
	},
	setAcceptingRanges: function(acceptingRanges) {
		this.acceptingRanges = acceptingRanges;
	},
	getAddress: function() {
		return this.address;
	},
	setAddress: function(address) {
		this.address = address;
	},
	getAgent: function() {
		return this.agent;
	},
	setAgent: function(agent) {
		this.agent = agent;
	},
	getPort: function() {
		return this.port;
	},
	setPort: function(port) {
		this.port = port;
	}
});

var Reference = new commons.Class({
	initialize: function() {
		if (arguments.length==1) {
			this.internalRef = arguments[0];
		} else if (arguments.length==2) {
			this.baseRef = arguments[0];
			this.internalRef = arguments[1];
		}
		
		this.updateIndexes();
	},

	addQueryParameter: function() {
		var name = null;
		var value = null;
		if (arguments.length==1) {
			name = arguments[0].getName();
			value = arguments[0].getValue();
		} else if (arguments.length==2) {
			name = arguments[0];
			value = arguments[1];
		}
		
		var query = this.getQuery();

        if (query == null) {
            if (value == null) {
            	this.setQuery(Reference.encode(name));
            } else {
            	this.setQuery(Reference.encode(name) + '=' + Reference.encode(value));
            }
        } else {
            if (value == null) {
            	this.setQuery(query + '&' + Reference.encode(name));
            } else {
                this.setQuery(query + '&' + Reference.encode(name) + '=' + Reference.encode(value));
            }
        }

        return this;
    },

    addQueryParameters: function(parameters) {
        for (var i=0; i<parameters.length; i++) {
        	var param = parameters[i];
            this.addQueryParameter(param);
        }

        return this;
    },

    addSegment: function(value) {
        var path = this.getPath();

        if (value != null) {
            if (path == null) {
                this.setPath("/" + value);
            } else {
                if (path.endsWith("/")) {
                	this.setPath(path + Reference.encode(value));
                } else {
                	this.setPath(path + "/" + Reference.encode(value));
                }
            }
        }

        return this;
    },

    clone: function() {
        var newRef = new Reference();

        if (this.baseRef == null) {
            newRef.baseRef = null;
        } else if (this.equals(this.baseRef)) {
            newRef.baseRef = newRef;
        } else {
            newRef.baseRef = this.baseRef.clone();
        }

        newRef.fragmentIndex = this.fragmentIndex;
        newRef.internalRef = this.internalRef;
        newRef.queryIndex = this.queryIndex;
        newRef.schemeIndex = this.schemeIndex;
        return newRef;
    },

    encodeInvalidCharacters: function(uriRef) {
        var result = uriRef;

        if (uriRef != null) {
            var valid = true;

            // Ensure that all characters are valid, otherwise encode them
            for (var i = 0; valid && (i < uriRef.length); i++) {
                if (!Reference.isValid(uriRef.charCodeAt(i))) {
                    valid = false;
                    //Context.getCurrentLogger().fine(
                    //        "Invalid character detected in URI reference at index '"
                    //                + i + "': \"" + uriRef.charAt(i)
                    //                + "\". It will be automatically encoded.");
                } else if ((uriRef.charAt(i) == '%')
                        && (i > uriRef.length - 2)) {
                    // A percent encoding character has been detected but
                    // without the necessary two hexadecimal digits following
                    valid = false;
                    //Context.getCurrentLogger().fine(
                    //        "Invalid percent encoding detected in URI reference at index '"
                    //                + i + "': \"" + uriRef.charAt(i)
                    //                + "\". It will be automatically encoded.");
                }
            }

            if (!valid) {
                var sb = new commons.StringBuilder();

                for (var i = 0; (i < uriRef.length); i++) {
                    if (Reference.isValid(uriRef.charCodeAt(i))) {
                        if ((uriRef.charAt(i) == "%")
                                && (i > uriRef.length - 2)) {
                            sb.append("%25");
                        } else {
                            sb.append(uriRef.charAt(i));
                        }
                    } else {
                        sb.append(Reference.encode(uriRef.charAt(i)));
                    }
                }

                result = sb.toString();
            }
        }

        return result;
    },

    equals: function(object) {
        if (object instanceof Reference) {
            var ref = object;
            if (this.internalRef == null) {
                return ref.internalRef == null;
            }
            return this.internalRef.equals(ref.internalRef);

        }

        return false;
    },

    _getAuthority: function() {
    	var part = this.isRelative() ? this.getRelativePart()
                : this.getSchemeSpecificPart();

        if ((part != null) && part.startsWith("//")) {
            var index = part.indexOf('/', 2);

            if (index != -1) {
                return part.substring(2, index);
            }

            index = part.indexOf('?');
            if (index != -1) {
                return part.substring(2, index);
            }

            return part.substring(2);

        }

        return null;
    },

    getAuthority: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}

        return decode ? Reference.decode(this._getAuthority()) : this._getAuthority();
    },

    getBaseRef: function() {
        return this.baseRef;
    },

    getExtensions: function() {
        var result = null;
        var lastSegment = this.getLastSegment();

        if (lastSegment != null) {
            var extensionIndex = lastSegment.indexOf('.');
            var matrixIndex = lastSegment.indexOf(';');

            if (extensionIndex != -1) {
                // Extensions found
                if (matrixIndex != -1) {
                    result = lastSegment.substring(extensionIndex + 1,
                            matrixIndex);
                } else {
                    // No matrix found
                    result = lastSegment.substring(extensionIndex + 1);
                }
            }
        }

        return result;
    },

    getExtensionsAsArray: function() {
        var result = null;
        var extensions = this.getExtensions();

        if (extensions != null) {
        	//TODO: check if split function correctly works
            result = extensions.split("\\.");
        }

        return result;
    },

    _getFragment: function() {
        if (this.hasFragment()) {
            return this.internalRef.substring(this.fragmentIndex + 1);
        }

        return null;
    },

    getFragment: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getFragment()) : this._getFragment();
    },

    _getHierarchicalPart: function() {
        if (this.hasScheme()) {
            // Scheme found
            if (this.hasQuery()) {
                // Query found
                return this.internalRef.substring(this.schemeIndex + 1,
                        this.queryIndex);
            }

            // No query found
            if (this.hasFragment()) {
                // Fragment found
                return this.internalRef.substring(this.schemeIndex + 1,
                        this.fragmentIndex);
            }

            // No fragment found
            return this.internalRef.substring(this.schemeIndex + 1);
        }

        // No scheme found
        if (this.hasQuery()) {
            // Query found
            return this.internalRef.substring(0, this.queryIndex);
        }
        if (this.hasFragment()) {
            // Fragment found
            return this.internalRef.substring(0, this.fragmentIndex);
        }

        // No fragment found
        return this.internalRef;
    },

    getHierarchicalPart: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return this.decode ? Reference.decode(this._getHierarchicalPart()) : this._getHierarchicalPart();
    },

    _getHostDomain: function() {
        var result = null;
        var authority = this.getAuthority();

        if (authority != null) {
            var index1 = authority.indexOf('@');
            // We must prevent the case where the userinfo part contains ':'
            var index2 = authority.indexOf(':', (index1 == -1 ? 0
                    : index1));

            if (index1 != -1) {
                // User info found
                if (index2 != -1) {
                    // Port found
                    result = authority.substring(index1 + 1, index2);
                } else {
                    // No port found
                    result = authority.substring(index1 + 1);
                }
            } else {
                // No user info found
                if (index2 != -1) {
                    // Port found
                    result = authority.substring(0, index2);
                } else {
                    // No port found
                    result = authority;
                }
            }
        }

        return result;
    },

    getHostDomain: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getHostDomain()) : this._getHostDomain();
    },

    _getHostIdentifier: function() {
        var result = new commons.StringBuilder();
        result.append(this.getScheme()).append("://").append(this.getAuthority());
        return result.toString();
    },

    getHostIdentifier: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getHostIdentifier()) : this._getHostIdentifier();
    },

    getHostPort: function() {
        var result = -1;
        var authority = this.getAuthority();

        if (authority != null) {
            var index1 = authority.indexOf('@');
            // We must prevent the case where the userinfo part contains ':'
            var index = authority.indexOf(':',
                    (index1 == -1 ? 0 : index1));

            if (index != -1) {
                try {
                    result = parseInt(authority.substring(index + 1));
                } catch (err) {
                    core.Context.getCurrentLogger().log(
                	        core.Level.WARNING,
                	        "Can't parse hostPort : [hostRef,requestUri]=["
                	                + this.getBaseRef() + "," + this.internalRef
                	                + "]");
                }
            }
        }

        return result;
    },

    _getIdentifier: function() {
        if (this.hasFragment()) {
            // Fragment found
            return this.internalRef.substring(0, this.fragmentIndex);
        }

        // No fragment found
        return this.internalRef;
    },

    getIdentifier: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getIdentifier()) : this._getIdentifier();
    },

    _getLastSegment: function() {
        var result = null;
        var path = this.getPath();

        if (path != null) {
            if (path.endsWith("/")) {
                path = path.substring(0, path.length() - 1);
            }

            var lastSlash = path.lastIndexOf('/');

            if (lastSlash != -1) {
                result = path.substring(lastSlash + 1);
            }
        }

        return result;
    },

    getLastSegment: function(decode, excludeMatrix) {
    	if (decode==null) {
    		decode = false;
    	}
    	if (excludeMatrix==null) {
    		excludeMatrix = false;
    	}
        var result = this._getLastSegment();

        if (excludeMatrix && (result != null)) {
            var matrixIndex = result.indexOf(';');

            if (matrixIndex != -1) {
                result = result.substring(0, matrixIndex);
            }
        }

        return decode ? Reference.decode(result) : result;
    },

    _getMatrix: function() {
        var lastSegment = this.getLastSegment();
        if (lastSegment != null) {
            var matrixIndex = lastSegment.indexOf(';');

            if (matrixIndex != -1) {
                return lastSegment.substring(matrixIndex + 1);
            }
        }

        // No matrix found
        return null;
    },

    getMatrix: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getMatrix()) : this._getMatrix();
    },

    //TODO:
    getMatrixAsForm: function() {
    	if (arguments.length==0) {
    		return new Form(this.getMatrix(), ';');
    	} else if (arguments.length==1) {
    		var characterSet = arguments[0];
            return new Form(this.getMatrix(), characterSet, ';');
    	}
    },

    getParentRef: function() {
        var result = null;

        if (this.isHierarchical()) {
            var parentRef = null;
            var path = this.getPath();
            if (!path.equals("/") && !path.equals("")) {
                if (path.endsWith("/")) {
                    path = path.substring(0, path.length() - 1);
                }

                parentRef = this.getHostIdentifier()
                        + path.substring(0, path.lastIndexOf('/') + 1);
            } else {
                parentRef = this.internalRef;
            }

            result = new Reference(parentRef);
        }

        return result;
    },

    _getPath: function() {
        var result = null;
        var part = this.isRelative() ? this.getRelativePart()
                : this.getSchemeSpecificPart();

        if (part != null) {
            if (part.startsWith("//")) {
                // Authority found
                var index1 = part.indexOf('/', 2);

                if (index1 != -1) {
                    // Path found
                    var index2 = part.indexOf('?');
                    if (index2 != -1) {
                        // Query found
                        result = part.substring(index1, index2);
                    } else {
                        // No query found
                        result = part.substring(index1);
                    }
                } else {
                    // Path must be empty in this case
                }
            } else {
                // No authority found
                var index = part.indexOf('?');
                if (index != -1) {
                    // Query found
                    result = part.substring(0, index);
                } else {
                    // No query found
                    result = part;
                }
            }
        }

        return result;
    },

    getPath: function(decode) {
        return decode ? Reference.decode(this._getPath()) : this._getPath();
    },

    _getQuery: function() {
        if (this.hasQuery()) {
            // Query found
            if (this.hasFragment()) {
                if (this.queryIndex < this.fragmentIndex) {
                    // Fragment found and query sign not inside fragment
                    return this.internalRef.substring(this.queryIndex + 1,
                            this.fragmentIndex);
                }

                return null;
            }

            // No fragment found
            return this.internalRef.substring(this.queryIndex + 1);
        }

        // No query found
        return null;
    },

    getQuery: function(decode) {
        return decode ? Reference.decode(this._getQuery()) : this._getQuery();
    },

    getQueryAsForm: function() {
    	if (arguments.length==0) {
    		return new Form(this.getQuery());
    	} else if (arguments.length==1) {
            return new Form(this.getQuery(), arguments[0]);
    	} else {
    		return null;
    	}
    },

    _getRelativePart: function() {
        return this.isRelative() ? this.toString(false, false) : null;
    },

    getRelativePart: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getRelativePart()) : this.getRelativePart();
    },

    getRelativeRef: function(base) {
    	if (base==null) {
    		base = this.getBaseRef();
    	}
        var result = null;

        if (base == null) {
            result = this;
        } else if (!this.isAbsolute() || !this.isHierarchical()) {
            throw new Error(
                    "The reference must have an absolute hierarchical path component");
        } else if (!base.isAbsolute() || !base.isHierarchical()) {
            throw new Error(
                    "The base reference must have an absolute hierarchical path component");
        } else if (!this.getHostIdentifier().equals(base.getHostIdentifier())) {
            result = this;
        } else {
            var localPath = this.getPath();
            var basePath = base.getPath();
            var relativePath = null;

            if ((basePath == null) || (localPath == null)) {
                relativePath = localPath;
            } else {
                // Find the junction point
                var diffFound = false;
                var lastSlashIndex = -1;
                var i = 0;
                var current;
                while (!diffFound && (i < localPath.length)
                        && (i < basePath.length)) {
                    current = localPath.charAt(i);

                    if (current != basePath.charAt(i)) {
                        diffFound = true;
                    } else {
                        if (current == "/") {
                            lastSlashIndex = i;
                        }
                        i++;
                    }
                }

                if (!diffFound) {
                    if (localPath.length == basePath.length) {
                        // Both paths are strictly equivalent
                        relativePath = ".";
                    } else if (i == localPath.length) {
                        // End of local path reached
                        if (basePath.charAt(i) == "/") {
                            if ((i + 1) == basePath.length) {
                                // Both paths are strictly equivalent
                                relativePath = ".";
                            } else {
                                // The local path is a direct parent of the base
                                // path
                                // We need to add enough ".." in the relative
                                // path
                                var sb = new commons.StringBuilder();

                                // Count segments
                                var segments = 0;
                                for (var j = basePath.indexOf('/', i); j != -1; j = basePath
                                        .indexOf('/', j + 1))
                                    segments++;

                                // Build relative path
                                for (var j = 0; j < segments; j++)
                                    sb.append("../");

                                var lastLocalSlash = localPath.lastIndexOf('/');
                                sb.append(localPath
                                        .substring(lastLocalSlash + 1));

                                relativePath = sb.toString();
                            }
                        } else {
                            // The base path has a segment that starts like
                            // the last local path segment
                            // But that is longer. Situation similar to a
                            // junction
                            var sb = new commons.StringBuilder();

                            // Count segments
                            var segments = 0;
                            for (var j = basePath.indexOf('/', i); j != -1; j = basePath
                                    .indexOf('/', j + 1))
                                segments++;

                            // Build relative path
                            for (var j = 0; j < segments; j++)
                                if (j > 0)
                                    sb.append("/..");
                                else
                                    sb.append("..");

                            relativePath = sb.toString();

                            if (relativePath.equals("")) {
                                relativePath = ".";
                            }
                        }
                    } else if (i == basePath.length) {
                        if (localPath.charAt(i) == "/") {
                            if ((i + 1) == localPath.length) {
                                // Both paths are strictly equivalent
                                relativePath = ".";
                            } else {
                                // The local path is a direct child of the base
                                // path
                                relativePath = localPath.substring(i + 1);
                            }
                        } else {
                            if (lastSlashIndex == (i - 1)) {
                                // The local path is a direct subpath of the
                                // base path
                                relativePath = localPath.substring(i);
                            } else {
                                relativePath = ".."
                                        + localPath.substring(lastSlashIndex);
                            }
                        }
                    }
                } else {
                    // We found a junction point, we need to add enough ".." in
                    // the relative path and append the rest of the local path
                    // the local path is a direct subpath of the base path
                    var sb = new commons.StringBuilder();

                    // Count segments
                    var segments = 0;
                    for (var j = basePath.indexOf('/', i); j != -1; j = basePath
                            .indexOf('/', j + 1))
                        segments++;

                    // Build relative path
                    for (var j = 0; j < segments; j++)
                        sb.append("../");

                    sb.append(localPath.substring(lastSlashIndex + 1));

                    relativePath = sb.toString();
                }
            }

            // Build the result reference
            result = new Reference();
            var query = this.getQuery();
            var fragment = this.getFragment();
            var modified = false;

            if ((query != null) && (!query.equals(base.getQuery()))) {
                result.setQuery(query);
                modified = true;
            }

            if ((fragment != null) && (!fragment.equals(base.getFragment()))) {
                result.setFragment(fragment);
                modified = true;
            }

            if (!modified || !relativePath.equals(".")) {
                result.setPath(relativePath);
            }
        }

        return result;
    },

    getRemainingPart: function() {
    	if (arguments.length==0) {
    		return this._getRemainingPart(false, true);
    	} else if (arguments.length==1) {
    		var decode = arguments[0];
    		return this._getRemainingPart(decode, true);
    	} else {
    		var decode = arguments[0];
    		var query = arguments[1];
    		return this._getRemainingPart(decode, query);
    	}
    },

    _getRemainingPart: function(decode, query) {
        var result = null;
        var all = this.toString(query, false);

        if (this.getBaseRef() != null) {
            var base = this.getBaseRef().toString(query, false);

            if ((base != null) && all.startsWith(base)) {
                result = all.substring(base.length);
            }
        } else {
            result = all;
        }

        return decode ? Reference.decode(result) : result;
    },

    _getScheme: function() {
        if (this.hasScheme()) {
            // Scheme found
            return this.internalRef.substring(0, this.schemeIndex);
        }

        // No scheme found
        return null;
    },

    getScheme: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getScheme()) : this._getScheme();
    },

    getSchemeProtocol: function() {
        return Protocol.valueOf(this.getScheme());
    },

    _getSchemeSpecificPart: function() {
        var result = null;

        if (this.hasScheme()) {
            // Scheme found
            if (this.hasFragment()) {
                // Fragment found
                result = this.internalRef.substring(this.schemeIndex + 1,
                        this.fragmentIndex);
            } else {
                // No fragment found
                result = this.internalRef.substring(this.schemeIndex + 1);
            }
        }

        return result;
    },

    getSchemeSpecificPart: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? Reference.decode(this._getSchemeSpecificPart())
                 : this._getSchemeSpecificPart();
    },

    _getSegments: function() {
        var result = [];
        var path = this.getPath();
        var start = -2; // The index of the slash starting the segment
        var current;

        if (path != null) {
            for (var i = 0; i < path.length; i++) {
                current = path.charAt(i);

                if (current == "/") {
                    if (start == -2) {
                        // Beginning of an absolute path or sequence of two
                        // separators
                        start = i;
                    } else {
                        // End of a segment
                        result.push(path.substring(start + 1, i));
                        start = i;
                    }
                } else {
                    if (start == -2) {
                        // Starting a new segment for a relative path
                        start = -1;
                    } else {
                        // Looking for the next character
                    }
                }
            }

            if (start != -2) {
                // Add the last segment
                result.push(path.substring(start + 1));
            }
        }

        return result;
    },

    getSegments: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        var result = this._getSegments();

        if (decode) {
            for (var i = 0; i < result.length; i++) {
                result.set(i, decode(result.get(i)));
            }
        }

        return result;
    },

    getTargetRef: function() {
        var result = null;

        // Step 1 - Resolve relative reference against their base reference
        if (this.isRelative() && (this.baseRef != null)) {
            var baseReference = null;

            if (this.baseRef.isAbsolute()) {
                baseReference = this.baseRef;
            } else {
                baseReference = this.baseRef.getTargetRef();
            }

            if (baseReference.isRelative()) {
                throw new Error(
                        "The base reference must have an absolute hierarchical path component");
            }

            // Relative URI detected
            var authority = this.getAuthority();
            var path = this.getPath();
            var query = this.getQuery();
            var fragment = this.getFragment();

            // Create an empty reference
            result = new Reference();
            result.setScheme(baseReference.getScheme());

            if (authority != null) {
                result.setAuthority(authority);
                result.setPath(path);
                result.setQuery(query);
            } else {
                result.setAuthority(baseReference.getAuthority());

                if ((path == null) || (path.equals(""))) {
                    result.setPath(baseReference.getPath());

                    if (query != null) {
                        result.setQuery(query);
                    } else {
                        result.setQuery(baseReference.getQuery());
                    }
                } else {
                    if (path.startsWith("/")) {
                        result.setPath(path);
                    } else {
                        var basePath = baseReference.getPath();
                        var mergedPath = null;

                        if ((baseReference.getAuthority() != null)
                                && ((basePath == null) || (basePath.equals("")))) {
                            mergedPath = "/" + path;
                        } else {
                            // Remove the last segment which may be empty if
                            // the path is ending with a slash
                            var lastSlash = basePath.lastIndexOf('/');
                            if (lastSlash == -1) {
                                mergedPath = path;
                            } else {
                                mergedPath = basePath.substring(0,
                                        lastSlash + 1) + path;
                            }
                        }

                        result.setPath(mergedPath);
                    }

                    result.setQuery(query);
                }
            }

            result.setFragment(fragment);
        } else if (this.isRelative()) {
            // Relative reference with no baseRef detected
            throw new Error(
                    "Relative references are only usable when a base reference is set.");
        } else {
            // Absolute URI detected
            result = new Reference(this.internalRef);
        }

        // Step 2 - Normalize the target reference
        result.normalize();

        return result;
    },

    _getUserInfo: function() {
        var result = null;
        var authority = this.getAuthority();

        if (authority != null) {
            var index = authority.indexOf('@');

            if (index != -1) {
                result = authority.substring(0, index);
            }
        }

        return result;
    },

    getUserInfo: function(decode) {
    	if (decode==null) {
    		decode = false;
    	}
        return decode ? decode(this._getUserInfo()) : this._getUserInfo();
    },

    hasExtensions: function() {
        var result = false;

        // If these reference ends with a "/", it cannot be a file.
        var path = this.getPath();
        if (!((path != null) && path.endsWith("/"))) {
            var lastSegment = this.getLastSegment();

            if (lastSegment != null) {
                var extensionsIndex = lastSegment.indexOf('.');
                var matrixIndex = lastSegment.indexOf(';');
                result = (extensionsIndex != -1)
                        && ((matrixIndex == -1) || (extensionsIndex < matrixIndex));
            }
        }

        return result;
    },

    hasFragment: function() {
        return (this.fragmentIndex != -1);
    },

    hasMatrix: function() {
        return (this.getLastSegment().indexOf(';') != -1);
    },

    hasQuery: function() {
        return (this.queryIndex != -1);
    },

    hasScheme: function() {
        return (this.schemeIndex != -1);
    },

    isAbsolute: function() {
        return (this.getScheme() != null);
    },

    isEquivalentTo: function(ref) {
        return this.getTargetRef().equals(ref.getTargetRef());
    },

    isHierarchical: function() {
        return this.isRelative() || (this.getSchemeSpecificPart().charAt(0) == '/');
    },

    isOpaque: function() {
        return this.isAbsolute() && (this.getSchemeSpecificPart().charAt(0) != '/');
    },

    isParent: function(childRef) {
        var result = false;

        if ((childRef != null) && (childRef.isHierarchical())) {
            result = childRef.toString(false, false).startsWith(
                    				this.toString(false, false));
        }

        return result;
    },

    isRelative: function() {
        return (this.getScheme() == null);
    },

    normalize: function() {
        // 1. The input buffer is initialized with the now-appended path
        // components and the output buffer is initialized to the empty string.
        var output = new commons.StringBuilder();
        var input = new commons.StringBuilder();
        var path = this.getPath();
        if (path != null) {
            input.append(path);
        }

        // 2. While the input buffer is not empty, loop as follows:
        while (input.length() > 0) {
            // A. If the input buffer begins with a prefix of "../" or "./",
            // then remove that prefix from the input buffer; otherwise,
            if ((input.length() >= 3) && input.substring(0, 3).equals("../")) {
                input.delete(0, 3);
            } else if ((input.length() >= 2)
                    && input.substring(0, 2).equals("./")) {
                input.delete(0, 2);
            }

            // B. if the input buffer begins with a prefix of "/./" or "/.",
            // where "." is a complete path segment, then replace that
            // prefix with "/" in the input buffer; otherwise,
            else if ((input.length() >= 3)
                    && input.substring(0, 3).equals("/./")) {
                input.delete(0, 2);
            } else if ((input.length() == 2)
                    && input.substring(0, 2).equals("/.")) {
                input.delete(1, 2);
            }

            // C. if the input buffer begins with a prefix of "/../" or "/..",
            // where ".." is a complete path segment, then replace that prefix
            // with "/" in the input buffer and remove the last segment and its
            // preceding "/" (if any) from the output buffer; otherwise,
            else if ((input.length() >= 4)
                    && input.substring(0, 4).equals("/../")) {
                input.delete(0, 3);
                removeLastSegment(output);
            } else if ((input.length() == 3)
                    && input.substring(0, 3).equals("/..")) {
                input.delete(1, 3);
                this.removeLastSegment(output);
            }

            // D. if the input buffer consists only of "." or "..", then remove
            // that from the input buffer; otherwise,
            else if ((input.length() == 1) && input.substring(0, 1).equals(".")) {
                input.delete(0, 1);
            } else if ((input.length() == 2)
                    && input.substring(0, 2).equals("..")) {
                input.delete(0, 2);
            }

            // E. move the first path segment in the input buffer to the end of
            // the output buffer, including the initial "/" character (if any)
            // and any subsequent characters up to, but not including, the next
            // "/" character or the end of the input buffer.
            else {
                var max = -1;
                for (var i = 1; (max == -1) && (i < input.length()); i++) {
                    if (input.charAt(i) == '/') {
                        max = i;
                    }
                }

                if (max != -1) {
                    // We found the next "/" character.
                    output.append(input.substring(0, max));
                    input.delete(0, max);
                } else {
                    // End of input buffer reached
                    output.append(input);
                    input.delete(0, input.length());
                }
            }
        }

        // Finally, the output buffer is returned as the result
        this.setPath(output.toString());

        // Ensure that the scheme and host names are reset in lower case
        this.setScheme(this.getScheme());
        this.setHostDomain(this.getHostDomain());

        // Remove the port if it is equal to the default port of the reference's
        // Protocol.
        var hostPort = this.getHostPort();
        if (hostPort != -1) {
        	var defaultPort = Protocol.valueOf(this.getScheme())
                    .getDefaultPort();
            if (hostPort == defaultPort) {
            	this.setHostPort(null);
            }
        }

        return this;
    },

    removeLastSegment: function(output) {
        var min = -1;
        for (var i = output.length() - 1; (min == -1) && (i >= 0); i--) {
            if (output.charAt(i) == '/') {
                min = i;
            }
        }

        if (min != -1) {
            // We found the previous "/" character.
            output.delete(min, output.length());
        } else {
            // End of output buffer reached
            output.delete(0, output.length());
        }
    },

    setAuthority: function(authority) {
        var oldPart = this.isRelative() ? this.getRelativePart()
                : this.getSchemeSpecificPart();
        var newPart;
        var newAuthority = (authority == null) ? "" : "//" + authority;

        if (oldPart == null) {
            newPart = newAuthority;
        } else if (oldPart.startsWith("//")) {
            var index = oldPart.indexOf('/', 2);

            if (index != -1) {
                newPart = newAuthority + oldPart.substring(index);
            } else {
                index = oldPart.indexOf('?');
                if (index != -1) {
                    newPart = newAuthority + oldPart.substring(index);
                } else {
                    newPart = newAuthority;
                }
            }
        } else {
            newPart = newAuthority + oldPart;
        }

        if (this.isAbsolute()) {
        	this.setSchemeSpecificPart(newPart);
        } else {
        	this.setRelativePart(newPart);
        }
    },

    setBaseRef: function(base) {
    	if (typeof base == "string") {
    		this.baseRef = new Reference(base);
    	} else {
    		this.baseRef = base;
    	}
    },

    _setExtensions: function(extensions) {
        var lastSegment = this.getLastSegment();

        if (lastSegment != null) {
            var extensionIndex = lastSegment.indexOf('.');
            var matrixIndex = lastSegment.indexOf(';');
            var sb = new StringBuilder();

            if (extensionIndex != -1) {
                // Extensions found
                sb.append(lastSegment.substring(0, extensionIndex));

                if ((extensions != null) && (extensions.length > 0)) {
                    sb.append('.').append(extensions);
                }

                if (matrixIndex != -1) {
                    sb.append(lastSegment.substring(matrixIndex));
                }
            } else {
                // Extensions not found
                if ((extensions != null) && (extensions.length > 0)) {
                    if (matrixIndex != -1) {
                        // Matrix found, make sure we append it
                        // after the extensions
                        sb.append(lastSegment.substring(0, matrixIndex))
                                .append('.').append(extensions)
                                .append(lastSegment.substring(matrixIndex));
                    } else {
                        // No matrix found, just append the extensions
                        sb.append(lastSegment).append('.').append(extensions);
                    }
                } else {
                    // No change necessary
                    sb.append(lastSegment);
                }
            }

            // Finally update the last segment
            this.setLastSegment(sb.toString());
        } else {
        	this.setLastSegment('.' + extensions);
        }
    },

    setExtensions: function(extensions) {
    	if (arguments[0] instanceof Array) {
            if (extensions != null) {
                var sb = new commons.StringBuilder();

                for (var i = 0; i < extensions.length; i++) {
                    if (i > 0) {
                        sb.append('.');
                    }

                    sb.append(extensions[i]);
                }

                this._setExtensions(sb.toString());
            }
    	} else {
            this._setExtensions(extensions);
    	}
    },

    setFragment: function(fragment) {
        fragment = this.encodeInvalidCharacters(fragment);

        if ((fragment != null) && (fragment.indexOf('#') != -1)) {
            throw new Error(
                    "Illegal '#' character detected in parameter");
        }

        if (this.hasFragment()) {
            // Existing fragment
            if (fragment != null) {
                this.internalRef = this.internalRef.substring(0,
                        this.fragmentIndex + 1) + fragment;
            } else {
                this.internalRef = this.internalRef.substring(0,
                        this.fragmentIndex);
            }
        } else {
            // No existing fragment
            if (fragment != null) {
                if (this.internalRef != null) {
                    this.internalRef = this.internalRef + '#' + fragment;
                } else {
                    this.internalRef = '#' + fragment;
                }
            } else {
                // Do nothing
            }
        }

        this.updateIndexes();
    },

    setHostDomain: function(domain) {
        var authority = this.getAuthority();

        if (authority == null) {
            this.setAuthority(domain);
        } else {
            if (domain == null) {
                domain = "";
            } else {
                // URI specification indicates that host names should be
                // produced in lower case
                domain = domain.toLowerCase();
            }

            var index1 = authority.indexOf('@');
            // We must prevent the case where the userinfo part contains ':'
            var index2 = authority.indexOf(':', (index1 == -1 ? 0
                    : index1));

            if (index1 != -1) {
                // User info found
                if (index2 != -1) {
                    // Port found
                    this.setAuthority(authority.substring(0, index1 + 1) + domain
                            + authority.substring(index2));
                } else {
                    // No port found
                	this.setAuthority(authority.substring(0, index1 + 1) + domain);
                }
            } else {
                // No user info found
                if (index2 != -1) {
                    // Port found
                	this.setAuthority(domain + authority.substring(index2));
                } else {
                    // No port found
                	this.setAuthority(domain);
                }
            }
        }
    },

    setHostPort: function(port) {
        var authority = this.getAuthority();

        if (authority != null) {
            var index1 = authority.indexOf('@');
            // We must prevent the case where the userinfo part contains ':'
            var index = authority.indexOf(':',
                    (index1 == -1 ? 0 : index1));
            var newPort = (port == null) ? "" : ":" + port;

            if (index != -1) {
            	this.setAuthority(authority.substring(0, index) + newPort);
            } else {
            	this.setAuthority(authority + newPort);
            }
        } else {
            throw new Error(
                    "No authority defined, please define a host name first");
        }
    },

    setIdentifier: function(identifier) {
        identifier = this.encodeInvalidCharacters(identifier);

        if (identifier == null) {
            identifier = "";
        }

        if (identifier.indexOf('#') != -1) {
            throw new Error(
                    "Illegal '#' character detected in parameter");
        }

        if (this.hasFragment()) {
            // Fragment found
            this.internalRef = identifier
                    + this.internalRef.substring(this.fragmentIndex);
        } else {
            // No fragment found
            this.internalRef = identifier;
        }

        this.updateIndexes();
    },

    setLastSegment: function(lastSegment) {
        var path = this.getPath();
        var lastSlashIndex = path.lastIndexOf('/');

        if (lastSlashIndex != -1) {
        	this.setPath(path.substring(0, lastSlashIndex + 1) + lastSegment);
        } else {
        	this.setPath('/' + lastSegment);
        }
    },

    setPath: function(path) {
        var oldPart = this.isRelative() ? this.getRelativePart()
                : this.getSchemeSpecificPart();
        var newPart = null;

        if (oldPart != null) {
            if (path == null) {
                path = "";
            }

            if (oldPart.startsWith("//")) {
                // Authority found
                var index1 = oldPart.indexOf('/', 2);

                if (index1 != -1) {
                    // Path found
                    var index2 = oldPart.indexOf('?');

                    if (index2 != -1) {
                        // Query found
                        newPart = oldPart.substring(0, index1) + path
                                + oldPart.substring(index2);
                    } else {
                        // No query found
                        newPart = oldPart.substring(0, index1) + path;
                    }
                } else {
                    // No path found
                    var index2 = oldPart.indexOf('?');

                    if (index2 != -1) {
                        // Query found
                        newPart = oldPart.substring(0, index2) + path
                                + oldPart.substring(index2);
                    } else {
                        // No query found
                        newPart = oldPart + path;
                    }
                }
            } else {
                // No authority found
                var index = oldPart.indexOf('?');

                if (index != -1) {
                    // Query found
                    newPart = path + oldPart.substring(index);
                } else {
                    // No query found
                    newPart = path;
                }
            }
        } else {
            newPart = path;
        }

        if (this.isAbsolute()) {
        	this.setSchemeSpecificPart(newPart);
        } else {
        	this.setRelativePart(newPart);
        }
    },

    setProtocol: function(protocol) {
        this.setScheme(protocol.getSchemeName());
    },

    setQuery: function(query) {
        query = this.encodeInvalidCharacters(query);
        var emptyQueryString = ((query == null) || (query.length <= 0));

        if (this.hasQuery()) {
            // Query found
            if (this.hasFragment()) {
                // Fragment found
                if (!emptyQueryString) {
                    this.internalRef = this.internalRef.substring(0,
                            this.queryIndex + 1)
                            + query
                            + this.internalRef.substring(this.fragmentIndex);
                } else {
                    this.internalRef = this.internalRef.substring(0,
                            this.queryIndex)
                            + this.internalRef.substring(this.fragmentIndex);
                }
            } else {
                // No fragment found
                if (!emptyQueryString) {
                    this.internalRef = this.internalRef.substring(0,
                            this.queryIndex + 1) + query;
                } else {
                    this.internalRef = this.internalRef.substring(0,
                            this.queryIndex);
                }
            }
        } else {
            // No query found
            if (this.hasFragment()) {
                // Fragment found
                if (!emptyQueryString) {
                    this.internalRef = this.internalRef.substring(0,
                            this.fragmentIndex)
                            + '?'
                            + query
                            + this.internalRef.substring(this.fragmentIndex);
                } else {
                    // Do nothing;
                }
            } else {
                // No fragment found
                if (!emptyQueryString) {
                    if (this.internalRef != null) {
                        this.internalRef = this.internalRef + '?' + query;
                    } else {
                        this.internalRef = '?' + query;
                    }
                } else {
                    // Do nothing;
                }
            }
        }

        this.updateIndexes();
    },

    setRelativePart: function(relativePart) {
        relativePart = this.encodeInvalidCharacters(relativePart);

        if (relativePart == null) {
            relativePart = "";
        }

        if (!this.hasScheme()) {
            // This is a relative reference, no scheme found
            if (this.hasQuery()) {
                // Query found
                this.internalRef = relativePart
                        + this.internalRef.substring(this.queryIndex);
            } else if (this.hasFragment()) {
                // Fragment found
                this.internalRef = relativePart
                        + this.internalRef.substring(this.fragmentIndex);
            } else {
                // No fragment found
                this.internalRef = relativePart;
            }
        }

        this.updateIndexes();
    },

    setScheme: function(scheme) {
        scheme = this.encodeInvalidCharacters(scheme);

        if (scheme != null) {
            // URI specification indicates that scheme names should be
            // produced in lower case
            scheme = scheme.toLowerCase();
        }

        if (this.hasScheme()) {
            // Scheme found
            if (scheme != null) {
                this.internalRef = scheme
                        + this.internalRef.substring(this.schemeIndex);
            } else {
                this.internalRef = this.internalRef
                        .substring(this.schemeIndex + 1);
            }
        } else {
            // No scheme found
            if (scheme != null) {
                if (this.internalRef == null) {
                    this.internalRef = scheme + ':';
                } else {
                    this.internalRef = scheme + ':' + this.internalRef;
                }
            }
        }

        this.updateIndexes();
    },

    setSchemeSpecificPart: function(schemeSpecificPart) {
        schemeSpecificPart = this.encodeInvalidCharacters(schemeSpecificPart);

        if (schemeSpecificPart == null) {
            schemeSpecificPart = "";
        }

        if (this.hasScheme()) {
            // Scheme found
            if (this.hasFragment()) {
                // Fragment found
                this.internalRef = this.internalRef.substring(0,
                        this.schemeIndex + 1)
                        + schemeSpecificPart
                        + this.internalRef.substring(this.fragmentIndex);
            } else {
                // No fragment found
                this.internalRef = this.internalRef.substring(0,
                        this.schemeIndex + 1) + schemeSpecificPart;
            }
        } else {
            // No scheme found
            if (this.hasFragment()) {
                // Fragment found
                this.internalRef = schemeSpecificPart
                        + this.internalRef.substring(this.fragmentIndex);
            } else {
                // No fragment found
                this.internalRef = schemeSpecificPart;
            }
        }

        this.updateIndexes();
    },

    setSegments: function(segments) {
        var sb = new commons.StringBuilder();

        for (var i=0; i<segments.length; i++) {
        	var segment = segments[i];
            sb.append('/').append(segment);
        }

        this.setPath(sb.toString());
    },

    setUserInfo: function(userInfo) {
        var authority = this.getAuthority();

        if (authority != null) {
            var index = authority.indexOf('@');
            var newUserInfo = (userInfo == null) ? "" : userInfo + '@';

            if (index != -1) {
            	this.setAuthority(newUserInfo + authority.substring(index + 1));
            } else {
            	this.setAuthority(newUserInfo + authority);
            }
        } else {
            throw new Error(
                    "No authority defined, please define a host name first");
        }
    },

    toString: function() {
    	if (arguments.length==0) {
    		return this.internalRef;
    	} else if (arguments.length==2) {
    		var query = arguments[0];
    		var fragment = arguments[1];
    		return this._toString(query, fragment);
    	}
    },

    _toString: function(query, fragment) {
        if (query) {
            if (fragment) {
                return this.internalRef;
            }

            if (this.hasFragment()) {
                return this.internalRef.substring(0, this.fragmentIndex);
            }
            return this.internalRef;
        }

        if (fragment) {
            // Fragment should be included
            if (this.hasQuery()) {
                // Query found
                if (this.hasFragment()) {
                    // Fragment found
                    return this.internalRef.substring(0, this.queryIndex) + "#"
                            + this.getFragment();
                }

                // No fragment found
                return this.internalRef.substring(0, this.queryIndex);
            }

            // No query found
            return this.internalRef;
        }

        // Fragment should not be included
        if (this.hasQuery()) {
            // Query found
            return this.internalRef.substring(0, this.queryIndex);
        }
        if (this.hasFragment()) {
            // Fragment found
            return this.internalRef.substring(0, this.fragmentIndex);
        }

        return this.internalRef;
    },

    updateIndexes: function() {
        if (this.internalRef != null) {
            // Compute the indexes
            var firstSlashIndex = this.internalRef.indexOf('/');
            this.schemeIndex = this.internalRef.indexOf(':');

            if ((firstSlashIndex != -1) && (this.schemeIndex > firstSlashIndex)) {
                // We are in the rare case of a relative reference where one of
                // the path segments contains a colon character. In this case,
                // we ignore the colon as a valid scheme index.
                // Note that this colon can't be in the first segment as it is
                // forbidden by the URI RFC.
                this.schemeIndex = -1;
            }

            this.queryIndex = this.internalRef.indexOf('?');
            this.fragmentIndex = this.internalRef.indexOf('#');

            if (this.hasQuery() && this.hasFragment()
                    && (this.queryIndex > this.fragmentIndex)) {
                // Query sign inside fragment
                this.queryIndex = -1;
            }

            if (this.hasQuery() && this.schemeIndex > this.queryIndex) {
                // Colon sign inside query
                this.schemeIndex = -1;
            }

            if (this.hasFragment() && this.schemeIndex > this.fragmentIndex) {
                // Colon sign inside fragment
                this.schemeIndex = -1;
            }
        } else {
            this.schemeIndex = -1;
            this.queryIndex = -1;
            this.fragmentIndex = -1;
        }
    }
});

Reference.extend({
	charValidityMap: [],

    decode: function(toDecode, characterSet) {
    	if (characterSet==null) {
    		characterSet = CharacterSet.UTF_8;
    	}

    	var result = unescape(toDecode);

        return result;
    },

    //public static String encode(String toEncode) {
    //public static String encode(String toEncode, boolean queryString) {
    //public static String encode(String toEncode, CharacterSet characterSet) {
    encode: function(toEncode, queryString, characterSet) {
    	if (queryString==null) {
    		queryString = true;
    	}
    	if (characterSet==null) {
    		characterSet = CharacterSet.UTF_8;
    	}

        var result = escape(toEncode);

        if (queryString) {
            result = result.replace("+", "%20").replace("*", "%2A")
                    .replace("%7E", "~");
        }

        return result;
    },

    isAlpha: function(character) {
        return Reference.isUpperCase(character) || Reference.isLowerCase(character);
    },

    isDigit: function(character) {
        return (character >= "0".charCodeAt(0)) && (character <= "9".charCodeAt(0));
    },

    isGenericDelimiter: function(character) {
        return (character == ":".charCodeAt(0))
        		|| (character == "/".charCodeAt(0)) || (character == "?".charCodeAt(0))
                || (character == "#".charCodeAt(0)) || (character == "[".charCodeAt(0))
                || (character == "]".charCodeAt(0)) || (character == "@".charCodeAt(0));
    },

    isLowerCase: function(character) {
        return (character >= "a".charCodeAt(0)) && (character <= "z".charCodeAt(0));
    },

    isReserved: function(character) {
        return Reference.isGenericDelimiter(character) || Reference.isSubDelimiter(character);
    },

    isSubDelimiter: function(character) {
        return (character == "!".charCodeAt(0))
        		|| (character == "$".charCodeAt(0)) || (character == "&".charCodeAt(0))
                || (character == "\'".charCodeAt(0)) || (character == "(".charCodeAt(0))
                || (character == ")".charCodeAt(0)) || (character == "*".charCodeAt(0))
                || (character == "+".charCodeAt(0)) || (character == ",".charCodeAt(0))
                || (character == ";".charCodeAt(0)) || (character == "=".charCodeAt(0));
    },

    isUnreserved: function(character) {
        return Reference.isAlpha(character) || Reference.isDigit(character)
        		|| (character == "-".charCodeAt(0))
                || (character == ".".charCodeAt(0))
                || (character == "_".charCodeAt(0))
                || (character == "~".charCodeAt(0));
    },

    isUpperCase: function(character) {
        return (character >= "A".charCodeAt(0)) && (character <= "Z".charCodeAt(0));
    },

    isValid: function(character) {
        return character >= 0 && character < 127 && Reference.charValidityMap[character];
    },
    
    toString: function() {
    	if (arguments.length==6) {
    		Reference._toString1.apply(Reference, arguments);
    	} else if (arguments.length==3) {
    		Reference._toString2.apply(Reference, arguments);
    	} else if (arguments.length==5) {
    		Reference._toString3.apply(Reference, arguments);
    	}
    },

    _toString1: function(scheme, hostName, hostPort, path, query, fragment) {
        var host = hostName;

        // Appends the host port number
        if (hostPort != null) {
            var defaultPort = Protocol.valueOf(scheme).getDefaultPort();
            if (hostPort != defaultPort) {
                host = hostName + ':' + hostPort;
            }
        }

        return Reference.toString3(scheme, host, path, query, fragment);
    },

    _toString2: function(relativePart, query, fragment) {
        var sb = new commons.StringBuilder();

        // Append the path
        if (relativePart != null) {
            sb.append(relativePart);
        }

        // Append the query string
        if (query != null) {
            sb.append('?').append(query);
        }

        // Append the fragment identifier
        if (fragment != null) {
            sb.append('#').append(fragment);
        }

        // Actually construct the reference
        return sb.toString();
    },

    _toString3: function(scheme, host, path, query, fragment) {
        var sb = new commons.StringBuilder();

        if (scheme != null) {
            // Append the scheme and host name
            sb.append(scheme.toLowerCase()).append("://").append(host);
        }

        // Append the path
        if (path != null) {
            sb.append(path);
        }

        // Append the query string
        if (query != null) {
            sb.append('?').append(query);
        }

        // Append the fragment identifier
        if (fragment != null) {
            sb.append('#').append(fragment);
        }

        // Actually construct the reference
        return sb.toString();
    }

});

// Initialize the map of valid characters.
for (var character = 0; character < 127; character++) {
	Reference.charValidityMap[character] = Reference.isReserved(character)
			|| Reference.isUnreserved(character) || (character == "%".charCodeAt(0));
}

var Method = new commons.Class({
	initialize: function(name, description, uri, safe, idempotent, replying) {
		this.name = name;
		this.description = description;
		this.uri = uri;
		if (safe!=null) {
			this.safe = safe;
		} else {
			this.safe = false;
		}
		if (idempotent!=null) {
			this.idempotent = idempotent;
		} else {
			this.idempotent = false;
		}
		if (replying!=null) {
			this.replying = replying;
		} else {
			this.replying = true;
		}
	},

	getName: function() {
		return this.name;
	},

	getUri: function() {
        return this.uri;
    },

    isIdempotent: function() {
        return this.idempotent;
    },

    isReplying: function() {
        return this.replying;
    },

    isSafe: function() {
        return this.safe;
    },

    equals: function(status) {
    	return (this.getName()==status.getName());
    },

    toString: function() {
        return this.getName();
    }
});

Method.extend({
    BASE_HTTP: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html",
    CONNECT: new Method("CONNECT",
        "Used with a proxy that can dynamically switch to being a tunnel",
        Method.BASE_HTTP + "#sec9.9", false, false),
	DELETE: new Method("DELETE",
	    "Requests that the origin server deletes the resource identified by the request URI",
	    Method.BASE_HTTP + "#sec9.7", false, true),
	GET: new Method("GET",
        "Retrieves whatever information (in the form of an entity) that is identified by the request URI",
        Method.BASE_HTTP + "#sec9.3", true, true),
	HEAD: new Method("HEAD",
        "Identical to GET except that the server must not return a message body in the response",
        Method.BASE_HTTP + "#sec9.4", true, true),
	OPTIONS: new Method("OPTIONS",
        "Requests for information about the communication options available on the request/response chain identified by the URI",
        Method.BASE_HTTP + "#sec9.2", true, true),
	POST: new Method("POST",
        "Requests that the origin server accepts the entity enclosed in the request as a new subordinate of the resource identified by the request URI",
        Method.BASE_HTTP + "#sec9.5", false, false),
	PUT: new Method("PUT",
        "Requests that the enclosed entity be stored under the supplied request URI",
        Method.BASE_HTTP + "#sec9.6", false, true),
	TRACE: new Method("TRACE",
        "Used to invoke a remote, application-layer loop-back of the request message",
        Method.BASE_HTTP + "#sec9.8", true, true),
    valueOf: function(name) {
        var upperCaseName = (new String(name)).toUpperCase();
        var methods = [ Method.CONNECT, Method.DELETE, Method.GET, Method.HEAD,
                        Method.OPTIONS, Method.POST, Method.PUT, Method.TRACE ];
        for (var i=0; i<methods.length; i++) {
        	var method = methods[i];
        	if (method.getName()==upperCaseName) {
        		return method;
        	}
        }
		return null;
    }
});

var Status = new commons.Class({
    initialize: function() {
    	if (arguments[0] instanceof Status) {
    		var status = arguments[0];
    		var error = null;
    		var description = null;
    		if (typeof arguments[1]=="String") {
    			description = arguments[1];
    		} else {
    			error = arguments[1];
    		}
    		this.code = status.getCode();
    		this.error = (error == null) ? status.getError()
                    : error;
    		this.description = (description == null) ? status.getDescription() : description;
    		this.uri = status.getUri();
    	} else {
        	var code = arguments[0];
    		var reasonPhrase = null;
        	var error = null;
        	var description = null;
        	var uri = null;

        	if (arguments.length=4 && typeof arguments[1]=="String") {
        		reasonPhrase = arguments[1];
        		description = arguments[2];
        		uri = arguments[3];
        	} else {
        		error = arguments[1];
        		if (arguments.length==5) {
            		reasonPhrase = arguments[2];
                    description = arguments[3];
            		uri = arguments[4];
        		}
        	}
        	this.code = code;
    		this.reasonPhrase = reasonPhrase;
    		this.error = error;
    		this.description = description;
    		this.uri = uri;
    	}
    },
    getCode: function() {
        return this.code;
    },
    equals: function(status) {
    	return (status!=null && status.getCode()==this.getCode());
    },
    getDescription: function() {
        var result = this.description;

        if (result == null) {
            switch (this.code) {
            case 100:
                result = "The client should continue with its request";
                break;
            case 101:
                result = "The server is willing to change the application protocol being used on this connection";
                break;
            case 102:
                result = "Interim response used to inform the client that the server has accepted the complete request, but has not yet completed it";
                break;
            case 110:
                result = "MUST be included whenever the returned response is stale";
                break;
            case 111:
                result = "MUST be included if a cache returns a stale response because an attempt to revalidate the response failed, due to an inability to reach the server";
                break;
            case 112:
                result = "SHOULD be included if the cache is intentionally disconnected from the rest of the network for a period of time";
                break;
            case 113:
                result = "MUST be included if the cache heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours";
                break;
            case 199:
                result = "The warning text MAY include arbitrary information to be presented to a human user, or logged. A system receiving this warning MUST NOT take any automated action, besides presenting the warning to the user";
                break;

            case 200:
                result = "The request has succeeded";
                break;
            case 201:
                result = "The request has been fulfilled and resulted in a new resource being created";
                break;
            case 202:
                result = "The request has been accepted for processing, but the processing has not been completed";
                break;
            case 203:
                result = "The returned meta-information is not the definitive set as available from the origin server";
                break;
            case 204:
                result = "The server has fulfilled the request but does not need to return an entity-body, and might want to return updated meta-information";
                break;
            case 205:
                result = "The server has fulfilled the request and the user agent should reset the document view which caused the request to be sent";
                break;
            case 206:
                result = "The server has fulfilled the partial get request for the resource";
                break;
            case 207:
                result = "Provides status for multiple independent operations";
                break;
            case 214:
                result = "MUST be added by an intermediate cache or proxy if it applies any transformation changing the content-coding (as specified in the Content-Encoding header) or media-type (as specified in the Content-Type header) of the response, or the entity-body of the response, unless this Warning code already appears in the response";
                break;
            case 299:
                result = "The warning text MAY include arbitrary information to be presented to a human user, or logged. A system receiving this warning MUST NOT take any automated action";
                break;

            case 300:
                result = "The requested resource corresponds to any one of a set of representations";
                break;
            case 301:
                result = "The requested resource has been assigned a new permanent URI";
                break;
            case 302:
                result = "The requested resource can be found under a different URI";
                break;
            case 303:
                result = "The response to the request can be found under a different URI";
                break;
            case 304:
                result = "The client has performed a conditional GET request and the document has not been modified";
                break;
            case 305:
                result = "The requested resource must be accessed through the proxy given by the location field";
                break;
            case 307:
                result = "The requested resource resides temporarily under a different URI";
                break;

            case 400:
                result = "The request could not be understood by the server due to malformed syntax";
                break;
            case 401:
                result = "The request requires user authentication";
                break;
            case 402:
                result = "This code is reserved for future use";
                break;
            case 403:
                result = "The server understood the request, but is refusing to fulfill it";
                break;
            case 404:
                result = "The server has not found anything matching the request URI";
                break;
            case 405:
                result = "The method specified in the request is not allowed for the resource identified by the request URI";
                break;
            case 406:
                result = "The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request";
                break;
            case 407:
                result = "This code is similar to Unauthorized, but indicates that the client must first authenticate itself with the proxy";
                break;
            case 408:
                result = "The client did not produce a request within the time that the server was prepared to wait";
                break;
            case 409:
                result = "The request could not be completed due to a conflict with the current state of the resource";
                break;
            case 410:
                result = "The requested resource is no longer available at the server and no forwarding address is known";
                break;
            case 411:
                result = "The server refuses to accept the request without a defined content length";
                break;
            case 412:
                result = "The precondition given in one or more of the request header fields evaluated to false when it was tested on the server";
                break;
            case 413:
                result = "The server is refusing to process a request because the request entity is larger than the server is willing or able to process";
                break;
            case 414:
                result = "The server is refusing to service the request because the request URI is longer than the server is willing to interpret";
                break;
            case 415:
                result = "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method";
                break;
            case 416:
                result = "For byte ranges, this means that the first byte position were greater than the current length of the selected resource";
                break;
            case 417:
                result = "The expectation given in the request header could not be met by this server";
                break;
            case 422:
                result = "The server understands the content type of the request entity and the syntax of the request entity is correct but was unable to process the contained instructions";
                break;
            case 423:
                result = "The source or destination resource of a method is locked";
                break;
            case 424:
                result = "The method could not be performed on the resource because the requested action depended on another action and that action failed";
                break;

            case 500:
                result = "The server encountered an unexpected condition which prevented it from fulfilling the request";
                break;
            case 501:
                result = "The server does not support the functionality required to fulfill the request";
                break;
            case 502:
                result = "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request";
                break;
            case 503:
                result = "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server";
                break;
            case 504:
                result = "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request";
                break;
            case 505:
                result = "The server does not support, or refuses to support, the protocol version that was used in the request message";
                break;
            case 507:
                result = "The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request";
                break;

            case 1000:
                result = "The connector failed to connect to the server";
                break;
            case 1001:
                result = "The connector failed to complete the communication with the server";
                break;
            case 1002:
                result = "The connector encountered an unexpected condition which prevented it from fulfilling the request";
                break;
            }
        }

        return result;
    },
    getName: function() {
        return this.getReasonPhrase();
    },
    getReasonPhrase: function() {
        var result = this.reasonPhrase;

        if (result == null) {
            switch (this.code) {
            case 100:
                result = "Continue";
                break;
            case 101:
                result = "Switching Protocols";
                break;
            case 102:
                result = "Processing";
                break;
            case 110:
                result = "Response is stale";
                break;
            case 111:
                result = "Revalidation failed";
                break;
            case 112:
                result = "Disconnected operation";
                break;
            case 113:
                result = "Heuristic expiration";
                break;
            case 199:
                result = "Miscellaneous warning";
                break;

            case 200:
                result = "OK";
                break;
            case 201:
                result = "Created";
                break;
            case 202:
                result = "Accepted";
                break;
            case 203:
                result = "Non-Authoritative Information";
                break;
            case 204:
                result = "No Content";
                break;
            case 205:
                result = "Reset Content";
                break;
            case 206:
                result = "Partial Content";
                break;
            case 207:
                result = "Multi-Status";
                break;
            case 214:
                result = "Transformation applied";
                break;
            case 299:
                result = "Miscellaneous persistent warning";
                break;

            case 300:
                result = "Multiple Choices";
                break;
            case 301:
                result = "Moved Permanently";
                break;
            case 302:
                result = "Found";
                break;
            case 303:
                result = "See Other";
                break;
            case 304:
                result = "Not Modified";
                break;
            case 305:
                result = "Use Proxy";
                break;
            case 307:
                result = "Temporary Redirect";
                break;

            case 400:
                result = "Bad Request";
                break;
            case 401:
                result = "Unauthorized";
                break;
            case 402:
                result = "Payment Required";
                break;
            case 403:
                result = "Forbidden";
                break;
            case 404:
                result = "Not Found";
                break;
            case 405:
                result = "Method Not Allowed";
                break;
            case 406:
                result = "Not Acceptable";
                break;
            case 407:
                result = "Proxy Authentication Required";
                break;
            case 408:
                result = "Request Timeout";
                break;
            case 409:
                result = "Conflict";
                break;
            case 410:
                result = "Gone";
                break;
            case 411:
                result = "Length Required";
                break;
            case 412:
                result = "Precondition Failed";
                break;
            case 413:
                result = "Request Entity Too Large";
                break;
            case 414:
                result = "Request URI Too Long";
                break;
            case 415:
                result = "Unsupported Media Type";
                break;
            case 416:
                result = "Requested Range Not Satisfiable";
                break;
            case 417:
                result = "Expectation Failed";
                break;
            case 422:
                result = "Unprocessable Entity";
                break;
            case 423:
                result = "Locked";
                break;
            case 424:
                result = "Failed Dependency";
                break;

            case 500:
                result = "Internal Server Error";
                break;
            case 501:
                result = "Not Implemented";
                break;
            case 502:
                result = "Bad Gateway";
                break;
            case 503:
                result = "Service Unavailable";
                break;
            case 504:
                result = "Gateway Timeout";
                break;
            case 505:
                result = "Version Not Supported";
                break;
            case 507:
                result = "Insufficient Storage";
                break;

            case 1000:
                result = "Connection Error";
                break;
            case 1001:
                result = "Communication Error";
                break;
            case 1002:
                result = "Internal Connector Error";
                break;
            }
        }

        return result;
    },
    getUri: function() {
        var result = this.uri;

        if (result == null) {
            switch (this.code) {
            case 100:
                result = Status.BASE_HTTP + "#sec10.1.1";
                break;
            case 101:
                result = Status.BASE_HTTP + "#sec10.1.2";
                break;
            case 102:
                result = Status.BASE_WEBDAV + "#STATUS_102";
                break;
            case 110:
            case 111:
            case 112:
            case 113:
            case 199:
            case 214:
            case 299:
                result = "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.46";
                break;

            case 200:
                result = Status.BASE_HTTP + "#sec10.2.1";
                break;
            case 201:
                result = Status.BASE_HTTP + "#sec10.2.2";
                break;
            case 202:
                result = Status.BASE_HTTP + "#sec10.2.3";
                break;
            case 203:
                result = Status.BASE_HTTP + "#sec10.2.4";
                break;
            case 204:
                result = Status.BASE_HTTP + "#sec10.2.5";
                break;
            case 205:
                result = Status.BASE_HTTP + "#sec10.2.6";
                break;
            case 206:
                result = Status.BASE_HTTP + "#sec10.2.7";
                break;
            case 207:
                result = Status.BBASE_WEBDAV + "#STATUS_207";
                break;

            case 300:
                result = Status.BASE_HTTP + "#sec10.3.1";
                break;
            case 301:
                result = Status.BASE_HTTP + "#sec10.3.2";
                break;
            case 302:
                result = Status.BASE_HTTP + "#sec10.3.3";
                break;
            case 303:
                result = Status.BASE_HTTP + "#sec10.3.4";
                break;
            case 304:
                result = Status.BASE_HTTP + "#sec10.3.5";
                break;
            case 305:
                result = Status.BASE_HTTP + "#sec10.3.6";
                break;
            case 307:
                result = Status.BASE_HTTP + "#sec10.3.8";
                break;

            case 400:
                result = Status.BASE_HTTP + "#sec10.4.1";
                break;
            case 401:
                result = Status.BASE_HTTP + "#sec10.4.2";
                break;
            case 402:
                result = Status.BASE_HTTP + "#sec10.4.3";
                break;
            case 403:
                result = Status.BASE_HTTP + "#sec10.4.4";
                break;
            case 404:
                result = Status.BASE_HTTP + "#sec10.4.5";
                break;
            case 405:
                result = Status.BASE_HTTP + "#sec10.4.6";
                break;
            case 406:
                result = Status.BASE_HTTP + "#sec10.4.7";
                break;
            case 407:
                result = Status.BASE_HTTP + "#sec10.4.8";
                break;
            case 408:
                result = Status.BASE_HTTP + "#sec10.4.9";
                break;
            case 409:
                result = Status.BASE_HTTP + "#sec10.4.10";
                break;
            case 410:
                result = Status.BASE_HTTP + "#sec10.4.11";
                break;
            case 411:
                result = Status.BASE_HTTP + "#sec10.4.12";
                break;
            case 412:
                result = Status.BASE_HTTP + "#sec10.4.13";
                break;
            case 413:
                result = Status.BASE_HTTP + "#sec10.4.14";
                break;
            case 414:
                result = Status.BASE_HTTP + "#sec10.4.15";
                break;
            case 415:
                result = Status.BASE_HTTP + "#sec10.4.16";
                break;
            case 416:
                result = Status.BASE_HTTP + "#sec10.4.17";
                break;
            case 417:
                result = Status.BASE_HTTP + "#sec10.4.18";
                break;
            case 422:
                result = Status.BBASE_WEBDAV + "#STATUS_422";
                break;
            case 423:
                result = Status.BBASE_WEBDAV + "#STATUS_423";
                break;
            case 424:
                result = Status.BBASE_WEBDAV + "#STATUS_424";
                break;

            case 500:
                result = Status.BASE_HTTP + "#sec10.5.1";
                break;
            case 501:
                result = Status.BASE_HTTP + "#sec10.5.2";
                break;
            case 502:
                result = Status.BASE_HTTP + "#sec10.5.3";
                break;
            case 503:
                result = Status.BASE_HTTP + "#sec10.5.4";
                break;
            case 504:
                result = Status.BASE_HTTP + "#sec10.5.5";
                break;
            case 505:
                result = Status.BASE_HTTP + "#sec10.5.6";
                break;
            case 507:
                result = Status.BASE_WEBDAV + "#STATUS_507";
                break;

            case 1000:
                result = Status.BASE_RESTLET
                        + "org/restlet/data/Status.html#CONNECTOR_ERROR_CONNECTION";
                break;
            case 1001:
                result = Status.BASE_RESTLET
                        + "org/restlet/data/Status.html#CONNECTOR_ERROR_COMMUNICATION";
                break;
            case 1002:
                result = Status.BBASE_RESTLET
                        + "org/restlet/data/Status.html#CONNECTOR_ERROR_INTERNAL";
                break;
            }
        }

        return result;
    },
    isClientError: function() {
        return Status.isClientError(this.getCode());
    },
    isConnectorError: function() {
        return Status.isConnectorError(this.getCode());
    },
    isError: function() {
        return Status.isError(this.getCode());
    },
    isGlobalError: function() {
        return Status.isGlobalError(this.getCode());
    },
    isInformational: function() {
        return Status.isInformational(this.getCode());
    },
    isRecoverableError: function() {
        return this.isConnectorError()
                || this.equals(Status.CLIENT_ERROR_REQUEST_TIMEOUT)
                || this.equals(Status.SERVER_ERROR_GATEWAY_TIMEOUT)
                || this.equals(Status.SERVER_ERROR_SERVICE_UNAVAILABLE);
    },
    isRedirection: function() {
        return Status.isRedirection(this.getCode());
    },
    isServerError: function() {
        return Status.isServerError(this.getCode());
    },
    isSuccess: function() {
        return Status.isSuccess(this.getCode());
    },
    toString: function() {
        return this.getReasonPhrase() + " (" + this.code + ")"
                + ((this.getDescription() == null) ? "" : " - " + this.getDescription());
    }
});

Status.extend({
	BASE_HTTP: "http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html",
	BASE_RESTLET: "http://www.restlet.org/documentation/",
           /* + Engine.MAJOR_NUMBER
            + '.'
            + Engine.MINOR_NUMBER
            + "/"
            + Edition.CURRENT.getShortName().toLowerCase() + "/api/";*/
	BASE_WEBDAV: "http://www.webdav.org/specs/rfc2518.html",
	CLIENT_ERROR_BAD_REQUEST: new Status(400),
	CLIENT_ERROR_CONFLICT: new Status(409),
	CLIENT_ERROR_EXPECTATION_FAILED: new Status(417),
	CLIENT_ERROR_FAILED_DEPENDENCY: new Status(424),
	CLIENT_ERROR_FORBIDDEN: new Status(403),
	CLIENT_ERROR_GONE: new Status(410),
	CLIENT_ERROR_LENGTH_REQUIRED: new Status(411),
	CLIENT_ERROR_LOCKED: new Status(423),
	CLIENT_ERROR_METHOD_NOT_ALLOWED: new Status(405),
	CLIENT_ERROR_NOT_ACCEPTABLE: new Status(406),
	CLIENT_ERROR_NOT_FOUND: new Status(404),
	CLIENT_ERROR_PAYMENT_REQUIRED: new Status(402),
	CLIENT_ERROR_PRECONDITION_FAILED: new Status(412),
	CLIENT_ERROR_PROXY_AUTHENTIFICATION_REQUIRED: new Status(407),
	CLIENT_ERROR_REQUEST_ENTITY_TOO_LARGE: new Status(413),
	CLIENT_ERROR_REQUEST_TIMEOUT: new Status(408),
	CLIENT_ERROR_REQUEST_URI_TOO_LONG: new Status(414),
	CLIENT_ERROR_REQUESTED_RANGE_NOT_SATISFIABLE: new Status(416),
	CLIENT_ERROR_UNAUTHORIZED: new Status(401),
	CLIENT_ERROR_UNPROCESSABLE_ENTITY: new Status(422),
	CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE: new Status(415),
	CONNECTOR_ERROR_COMMUNICATION: new Status(1001),
	CONNECTOR_ERROR_CONNECTION: new Status(1000),
	CONNECTOR_ERROR_INTERNAL: new Status(1002),
	INFO_CONTINUE: new Status(100),
	INFO_DISCONNECTED_OPERATION: new Status(112),
	INFO_HEURISTIC_EXPIRATION: new Status(113),
	INFO_MISC_WARNING: new Status(199),
	INFO_PROCESSING: new Status(102),
	INFO_REVALIDATION_FAILED: new Status(111),
	INFO_STALE_RESPONSE: new Status(110),
	INFO_SWITCHING_PROTOCOL: new Status(101),
	REDIRECTION_FOUND: new Status(302),
	REDIRECTION_MULTIPLE_CHOICES: new Status(300),
	REDIRECTION_NOT_MODIFIED: new Status(304),
	REDIRECTION_PERMANENT: new Status(301),
	REDIRECTION_SEE_OTHER: new Status(303),
	REDIRECTION_TEMPORARY: new Status(307),
	REDIRECTION_USE_PROXY: new Status(305),
	SERVER_ERROR_BAD_GATEWAY: new Status(502),
	SERVER_ERROR_GATEWAY_TIMEOUT: new Status(504),
	SERVER_ERROR_INSUFFICIENT_STORAGE: new Status(507),
	SERVER_ERROR_INTERNAL: new Status(500),
	SERVER_ERROR_NOT_IMPLEMENTED: new Status(501),
	SERVER_ERROR_SERVICE_UNAVAILABLE: new Status(503),
	SERVER_ERROR_VERSION_NOT_SUPPORTED: new Status(505),
	SUCCESS_ACCEPTED: new Status(202),
	SUCCESS_CREATED: new Status(201),
	SUCCESS_MISC_PERSISTENT_WARNING: new Status(299),
	SUCCESS_MULTI_STATUS: new Status(207),
	SUCCESS_NO_CONTENT: new Status(204),
	SUCCESS_NON_AUTHORITATIVE: new Status(203),
	SUCCESS_OK: new Status(200),
	SUCCESS_PARTIAL_CONTENT: new Status(206),
	SUCCESS_RESET_CONTENT: new Status(205),
	SUCCESS_TRANSFORMATION_APPLIED: new Status(214),
	checkReasonPhrase: function(reasonPhrase) {
        if (reasonPhrase != null) {
            if (reasonPhrase.contains("\n") || reasonPhrase.contains("\r")) {
                throw new Error(
                        "Reason phrase of the status must not contain CR or LF characters.");
            }
        }

        return reasonPhrase;
    },
    isClientError: function(code) {
        return (code >= 400) && (code <= 499);
    },
    isConnectorError: function(code) {
        return (code >= 1000) && (code <= 1099);
    },
    isError: function(code) {
        return Status.isClientError(code)
        		|| Status.isServerError(code)
                || Status.isConnectorError(code);
    },
    isGlobalError: function(code) {
        return (code >= 600) && (code <= 699);
    },
    isInformational: function(code) {
        return (code >= 100) && (code <= 199);
    },
    isRedirection: function(code) {
        return (code >= 300) && (code <= 399);
    },
    isServerError: function(code) {
        return (code >= 500) && (code <= 599);
    },
    isSuccess: function(code) {
        return (code >= 200) && (code <= 299);
    },
    valueOf: function(code) {
        var result = null;

        switch (code) {
        case 100:
            result = Status.INFO_CONTINUE;
            break;
        case 101:
            result = Status.INFO_SWITCHING_PROTOCOL;
            break;
        case 102:
            result = Status.INFO_PROCESSING;
            break;
        case 110:
            result = Status.INFO_STALE_RESPONSE;
            break;
        case 111:
            result = Status.INFO_REVALIDATION_FAILED;
            break;
        case 112:
            result = Status.INFO_DISCONNECTED_OPERATION;
            break;
        case 113:
            result = Status.INFO_HEURISTIC_EXPIRATION;
            break;
        case 199:
            result = Status.INFO_MISC_WARNING;
            break;

        case 200:
            result = Status.SUCCESS_OK;
            break;
        case 201:
            result = Status.SUCCESS_CREATED;
            break;
        case 202:
            result = Status.SUCCESS_ACCEPTED;
            break;
        case 203:
            result = Status.SUCCESS_NON_AUTHORITATIVE;
            break;
        case 204:
            result = Status.SUCCESS_NO_CONTENT;
            break;
        case 205:
            result = Status.SUCCESS_RESET_CONTENT;
            break;
        case 206:
            result = Status.SUCCESS_PARTIAL_CONTENT;
            break;
        case 207:
            result = Status.SUCCESS_MULTI_STATUS;
            break;
        case 214:
            result = Status.SUCCESS_TRANSFORMATION_APPLIED;
            break;
        case 299:
            result = Status.SUCCESS_MISC_PERSISTENT_WARNING;
            break;

        case 300:
            result = Status.REDIRECTION_MULTIPLE_CHOICES;
            break;
        case 301:
            result = Status.REDIRECTION_PERMANENT;
            break;
        case 302:
            result = Status.REDIRECTION_FOUND;
            break;
        case 303:
            result = Status.REDIRECTION_SEE_OTHER;
            break;
        case 304:
            result = Status.REDIRECTION_NOT_MODIFIED;
            break;
        case 305:
            result = Status.REDIRECTION_USE_PROXY;
            break;
        case 307:
            result = Status.REDIRECTION_TEMPORARY;
            break;

        case 400:
            result = Status.CLIENT_ERROR_BAD_REQUEST;
            break;
        case 401:
            result = Status.CLIENT_ERROR_UNAUTHORIZED;
            break;
        case 402:
            result = Status.CLIENT_ERROR_PAYMENT_REQUIRED;
            break;
        case 403:
            result = Status.CLIENT_ERROR_FORBIDDEN;
            break;
        case 404:
            result = Status.CLIENT_ERROR_NOT_FOUND;
            break;
        case 405:
            result = Status.CLIENT_ERROR_METHOD_NOT_ALLOWED;
            break;
        case 406:
            result = Status.CLIENT_ERROR_NOT_ACCEPTABLE;
            break;
        case 407:
            result = Status.CLIENT_ERROR_PROXY_AUTHENTIFICATION_REQUIRED;
            break;
        case 408:
            result = Status.CLIENT_ERROR_REQUEST_TIMEOUT;
            break;
        case 409:
            result = Status.CLIENT_ERROR_CONFLICT;
            break;
        case 410:
            result = Status.CLIENT_ERROR_GONE;
            break;
        case 411:
            result = Status.CLIENT_ERROR_LENGTH_REQUIRED;
            break;
        case 412:
            result = Status.CLIENT_ERROR_PRECONDITION_FAILED;
            break;
        case 413:
            result = Status.CLIENT_ERROR_REQUEST_ENTITY_TOO_LARGE;
            break;
        case 414:
            result = Status.CLIENT_ERROR_REQUEST_URI_TOO_LONG;
            break;
        case 415:
            result = Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE;
            break;
        case 416:
            result = Status.CLIENT_ERROR_REQUESTED_RANGE_NOT_SATISFIABLE;
            break;
        case 417:
            result = Status.CLIENT_ERROR_EXPECTATION_FAILED;
            break;
        case 422:
            result = Status.CLIENT_ERROR_UNPROCESSABLE_ENTITY;
            break;
        case 423:
            result = Status.CLIENT_ERROR_LOCKED;
            break;
        case 424:
            result = Status.CLIENT_ERROR_FAILED_DEPENDENCY;
            break;

        case 500:
            result = Status.SERVER_ERROR_INTERNAL;
            break;
        case 501:
            result = Status.SERVER_ERROR_NOT_IMPLEMENTED;
            break;
        case 502:
            result = Status.SERVER_ERROR_BAD_GATEWAY;
            break;
        case 503:
            result = Status.SERVER_ERROR_SERVICE_UNAVAILABLE;
            break;
        case 504:
            result = Status.SERVER_ERROR_GATEWAY_TIMEOUT;
            break;
        case 505:
            result = Status.SERVER_ERROR_VERSION_NOT_SUPPORTED;
            break;
        case 507:
            result = Status.SERVER_ERROR_INSUFFICIENT_STORAGE;
            break;

        case 1000:
            result = Status.CONNECTOR_ERROR_CONNECTION;
            break;
        case 1001:
            result = Status.CONNECTOR_ERROR_COMMUNICATION;
            break;
        case 1002:
            result = Status.CONNECTOR_ERROR_INTERNAL;
            break;

        default:
            result = new Status(code);
        }

        return result;
    }
});

var CacheDirective = new commons.Class(Parameter, {
    initialize: function(name, value, digit) {
        this.name = name;
        this.value = value;
        this.digit = digit;
    },

    isDigit: function() {
        return this.digit;
    },
    setDigit: function(digit) {
        this.digit = digit;
    }
});

CacheDirective.extend({ 
	maxAge: function(maxAge) {
		return new CacheDirective(core.HeaderConstants.CACHE_MAX_AGE,
						maxAge.toString(), true);
	},

	maxStale: function(maxStale) {
		if (maxStale==null) {
			return new CacheDirective(core.HeaderConstants.CACHE_MAX_STALE);
		} else {
		    return new CacheDirective(core.HeaderConstants.CACHE_MAX_STALE,
		            		maxStale.toString(), true);
		}
	},

	minFresh: function(minFresh) {
		return new CacheDirective(core.HeaderConstants.CACHE_MIN_FRESH,
						minFresh.toString(), true);
	},

	mustRevalidate: function() {
		return new CacheDirective(core.HeaderConstants.CACHE_MUST_REVALIDATE);
	},

	noCache: function(fieldNames) {
		if (fieldNames==null) {
			return new CacheDirective(core.HeaderConstants.CACHE_NO_CACHE);
		} else if (typeof fieldNames == "string") {
		    return new CacheDirective(core.HeaderConstants.CACHE_NO_CACHE, "\""
		            + fieldNames + "\"");
		} else {
		    var sb = new commons.StringBuilder();

		    if (fieldNames != null) {
		        for (var i = 0; i < fieldNames.length; i++) {
		            sb.append("\"" + fieldNames[i] + "\"");

		            if (i < fieldNames.length - 1) {
		                sb.append(',');
		            }
		        }
		    }

		    return new CacheDirective(core.HeaderConstants.CACHE_NO_CACHE, sb.toString());
		}
	},

	noStore: function() {
		return new CacheDirective(core.HeaderConstants.CACHE_NO_STORE);
	},

	noTransform: function() {
		return new CacheDirective(core.HeaderConstants.CACHE_NO_TRANSFORM);
	},

	onlyIfCached: function() {
		return new CacheDirective(core.HeaderConstants.CACHE_ONLY_IF_CACHED);
	},

	privateInfo: function(fieldNames) {
		if (fieldNames==null) {
			return new CacheDirective(core.HeaderConstants.CACHE_PRIVATE);
		} else if (typeof fieldNames == "string") {
			var fieldName = fieldNames;
			return new CacheDirective(core.HeaderConstants.CACHE_PRIVATE, "\"" + fieldName + "\"");
		} else {
			var sb = new commons.StringBuilder();

			if (fieldNames != null) {
				for (var i = 0; i < fieldNames.length; i++) {
					sb.append("\"" + fieldNames[i] + "\"");

					if (i < fieldNames.length - 1) {
						sb.append(',');
					}
				}
			}

			return new CacheDirective(core.HeaderConstants.CACHE_PRIVATE, sb.toString());
		}
	},

	proxyMustRevalidate: function() {
		return new CacheDirective(core.HeaderConstants.CACHE_PROXY_MUST_REVALIDATE);
	},

	publicInfo: function() {
		return new CacheDirective(core.HeaderConstants.CACHE_PUBLIC);
	},

	sharedMaxAge: function(sharedMaxAge) {
		return new CacheDirective(core.HeaderConstants.CACHE_SHARED_MAX_AGE,
						sharedMaxAge.toString(), true);
	}
});

var Cookie = new commons.Class({
    initialize: function() {
    	if (arguments.length==2 && typeof arguments[0]=="string") {
    		this.version = 0;
    		this.name = arguments[0];
    		this.value = arguments[1];
    	} else {
    		if (arguments.length>0) {
    			this.version = arguments[0];
    		}
    		if (arguments.length>1) {
    			this.name = arguments[1];
    		}
    		if (arguments.length>2) {
    			this.value = arguments[2];
    		}
    		if (arguments.length>3) {
    			this.path = arguments[3];
    		}
    		if (arguments.length>4) {
    			this.domain = arguments[4];
    		}
    	}
    },

    equals: function(obj) {
        // if obj == this no need to go further
        var result = (obj == this);

        if (!result) {
            result = obj instanceof Cookie;

            // if obj isn't a cookie or is null don't evaluate further
            if (result) {
                var that = obj;
                result = (((that.getName() == null) && (this.getName() == null)) || ((this.getName() != null) && this.getName()
                        .equals(that.getName())));

                // if names are both null or equal continue
                if (result) {
                    result = (((that.getValue() == null) && (this.getValue() == null)) || ((this.getValue() != null) && this.getValue()
                            .equals(that.getValue())));

                    // if values are both null or equal continue
                    if (result) {
                        result = (this.version == that.version);

                        // if versions are equal continue
                        if (result) {
                            result = (((that.getDomain() == null) && (this.getDomain() == null)) || ((this.getDomain() != null) && this.getDomain()
                                    .equals(that.getDomain())));

                            // if domains are equal continue
                            if (result) {
                                // compare paths taking
                                result = (((that.getPath() == null) && (this.getPath() == null)) || ((this.getPath() != null) && this.getPath()
                                        .equals(that.getPath())));
                            }
                        }
                    }
                }
            }
        }

        return result;
    },

    getDomain: function() {
        return this.domain;
    },

    getName: function() {
        return this.name;
    },

    getPath: function() {
        return this.path;
    },

    getValue: function() {
        return this.value;
    },

    getVersion: function() {
        return this.version;
    },

    setDomain: function(domain) {
        this.domain = domain;
    },

    setName: function(name) {
        this.name = name;
    },

    setPath: function(path) {
        this.path = path;
    },

    setValue: function(value) {
        this.value = value;
    },

    setVersion: function(version) {
        this.version = version;
    },

    toString: function() {
        return "Cookie [domain=" + this.domain + ", name=" + this.name + ", path=" + this.path
                + ", value=" + this.value + ", version=" + this.version + "]";
    }
});

var CookieSetting = new commons.Class(Cookie, {
	initialize: function() {
    	if (arguments.length==2 && typeof arguments[0]=="string") {
    		this.version = 0;
    		this.name = arguments[0];
    		this.value = arguments[1];
    	} else {
    		if (arguments.length>0) {
    			this.version = arguments[0];
    		}
    		if (arguments.length>1) {
    			this.name = arguments[1];
    		}
    		if (arguments.length>2) {
    			this.value = arguments[2];
    		}
    		if (arguments.length>3) {
    			this.path = arguments[3];
    		}
    		if (arguments.length>4) {
    			this.domain = arguments[4];
    		}
    		if (arguments.length>5) {
    			this.comment = arguments[5];
    		}
    		if (arguments.length>6) {
    			this.maxAge = arguments[6];
    		}
    		if (arguments.length>7) {
    			this.secure = arguments[7];
    		}
    		if (arguments.length>8) {
    			this.accessRestricted = arguments[8];
    		}
    	}
    },

    equals: function(obj) {
        var result = (obj == this);

        // if obj == this no need to go further
        if (!result) {
            // test for equality at Cookie level i.e. name and value.
            if (this.callSuper(obj)) {
                // if obj isn't a cookie setting or is null don't evaluate
                // further
                if (obj instanceof CookieSetting) {
                    var that = obj;
                    result = (this.maxAge == that.maxAge)
                            && (this.secure == that.secure);

                    if (result) // if "maxAge" and "secure" properties are equal
                    // test comments
                    {
                        if (!(this.comment == null)) // compare comments
                        // taking care of nulls
                        {
                            result = (this.comment.equals(that.comment));
                        } else {
                            result = (that.comment == null);
                        }
                    }
                }
            }
        }

        return result;
    },

    getComment: function() {
        return this.comment;
    },

    getDescription: function() {
        return "Cookie setting";
    },

    getMaxAge: function() {
        return this.maxAge;
    },

    isAccessRestricted: function() {
        return this.accessRestricted;
    },

    isSecure: function() {
        return this.secure;
    },

    setAccessRestricted: function(accessRestricted) {
        this.accessRestricted = accessRestricted;
    },

    setComment: function(comment) {
        this.comment = comment;
    },

    setMaxAge: function(maxAge) {
        this.maxAge = maxAge;
    },

    setSecure: function(secure) {
        this.secure = secure;
    },

    toString: function() {
        return "CookieSetting [accessRestricted=" + this.accessRestricted
                + ", comment=" + this.comment + ", maxAge=" + this.maxAge + ", secure="
                + this.secure + ", domain=" + this.getDomain() + ", name=" + this.getName()
                + ", path=" + this.getPath() + ", value=" + this.getValue()
                + ", version=" + this.getVersion() + "]";
    }
});

var Conditions = new commons.Class({
	initialize: function() {
		this.match = [];
		this.noneMatch = [];
	},

	getMatch: function() {
		if (this.match == null) {
			this.match = [];
		}
		return this.match;
	},

	getModifiedSince: function() {
		return this.modifiedSince;
	},

	getNoneMatch: function() {
		if (this.noneMatch == null) {
			this.noneMatch = [];
        }
		return this.noneMatch;
	},

	getRangeDate: function() {
		return this.rangeDate;
	},

	getRangeStatus: function() {
		var tag = null;
		var modificationDate = null;
		if (arguments.length==1) {
			var representationInfo = arguments[0];
            tag = (representationInfo == null) ? null
                    		: representationInfo.getTag();
            modificationDate = (representationInfo == null) ? null
            				: representationInfo.getModificationDate();
		} else if (arguments.length==2) {
			tag = arguments[0];
			modificationDate = arguments[1];
        } else {
        	throw new Error("The number of arguments isn't correct.");
		}

		var result = Status.CLIENT_ERROR_PRECONDITION_FAILED;
		if (this.getRangeTag() != null) {
			var all = this.getRangeTag().equals(Tag.ALL);

			// If a tag exists
			if (tag != null) {
				if (all || this.getRangeTag().equals(tag)) {
					result = Status.SUCCESS_OK;
				}
			}
		} else if (this.getRangeDate() != null) {
			// If a modification date exists
			if (this.getRangeDate().equals(modificationDate)) {
				result = Status.SUCCESS_OK;
			}
		}
		
		return result;
	},

	getRangeTag: function() {
		return this.rangeTag;
	},

	getStatus: function() {
		var method = null;
		var entityExists = false;
		var tag = null;
        var modificationDate = null;
        if (arguments.length==2) {
            method = arguments[0];
            var representationInfo = arguments[1];
            tag = (representationInfo == null) ? null : representationInfo.getTag();
            modificationDate = (representationInfo == null) ? null
                    		: representationInfo.getModificationDate();
        } else if (arguments.length==4) {
    		var method = arguments[0];
    		var entityExists = arguments[1];
    		var tag = arguments[2];
            var modificationDate = arguments[3];
        } else {
        	throw new Error("The number of arguments isn't correct.");
        }

	    var result = null;
	
	    // Is the "if-Match" rule followed or not?
	    if ((this.match != null) && !this.match.isEmpty()) {
	        var matched = false;
	        var failed = false;
	        var all = (this.getMatch().length > 0)
	                && this.getMatch()[0].equals(Tag.ALL);
	        var statusMessage = null;
	
	        if (entityExists) {
	            // If a tag exists
	            if (!all && (tag != null)) {
	                // Check if it matches one of the representations already
	                // cached by the client
	                var matchTag;
	
	                for (var i=0; !matched && i<this.getMatch().length; i++) {
	                	matchTag = this.getMatch()[i];
	                    matched = matchTag.equals(tag, false);
	                }
	            } else {
	                matched = all;
	            }
	        } else {
	            // See
	            // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24
	            // If none of the entity tags match, or if "*" is given and no
	            // current entity exists, the server MUST NOT perform the
	            // requested method
	            failed = all;
	            statusMessage = "A non existing resource can't match any tag.";
	        }
	
	        failed = failed || !matched;
	
	        if (failed) {
	            result = Status.CLIENT_ERROR_PRECONDITION_FAILED;
	            if (statusMessage != null) {
	                result = new Status(result, statusMessage);
	            }
	        }
	    }
	
	    // Is the "if-None-Match" rule followed or not?
	    if ((result == null) && (this.noneMatch != null)
	            && !this.noneMatch.isEmpty()) {
	        var matched = false;
	
	        if (entityExists) {
	            // If a tag exists
	            if (tag != null) {
	                // Check if it matches one of the representations
	                // already cached by the client
	                var noneMatchTag;
	
	                for (var i=0; !matched && i<this.getNoneMatch().length; i++) {
	                    noneMatchTag = this.getNoneMatch()[i];
	                    matched = noneMatchTag.equals(tag, (Method.GET
	                            .equals(method) || Method.HEAD.equals(method)));
	                }
	
	                // The current representation matches one of those already
	                // cached by the client
	                if (matched) {
	                    // Check if the current representation has been updated
	                    // since the "if-modified-since" date. In this case, the
	                    // rule is followed.
	                    var modifiedSince = this.getModifiedSince();
	                    var isModifiedSince = (modifiedSince != null)
	                            && (DateUtils.after(new Date(), modifiedSince)
	                                    || (modificationDate == null) || DateUtils
	                                    .after(modifiedSince, modificationDate));
	                    matched = !isModifiedSince;
	                }
	            } else {
	                matched = (this.getNoneMatch().size() > 0)
	                        && this.getNoneMatch().get(0).equals(Tag.ALL);
	            }
	        }
	
	        if (matched) {
	            if (Method.GET.equals(method) || Method.HEAD.equals(method)) {
	                result = Status.REDIRECTION_NOT_MODIFIED;
	            } else {
	                result = Status.CLIENT_ERROR_PRECONDITION_FAILED;
	            }
	        }
	    }
	
	    // Is the "if-Modified-Since" rule followed or not?
	    if ((result == null) && (this.getModifiedSince() != null)) {
	        var modifiedSince = this.getModifiedSince();
	        var isModifiedSince = (DateUtils.after(new Date(),
	                modifiedSince) || (modificationDate == null) || DateUtils
	                .after(modifiedSince, modificationDate));
	
	        if (!isModifiedSince) {
	            if (Method.GET.equals(method) || Method.HEAD.equals(method)) {
	                result = Status.REDIRECTION_NOT_MODIFIED;
	            } else {
	                result = Status.CLIENT_ERROR_PRECONDITION_FAILED;
	            }
	        }
	    }
	
	    // Is the "if-Unmodified-Since" rule followed or not?
	    if ((result == null) && (this.getUnmodifiedSince() != null)) {
	        var unModifiedSince = this.getUnmodifiedSince();
	        var isUnModifiedSince = ((unModifiedSince == null)
	                || (modificationDate == null) || !DateUtils.before(
	                modificationDate, unModifiedSince));
	
	        if (!isUnModifiedSince) {
	            result = Status.CLIENT_ERROR_PRECONDITION_FAILED;
	        }
	    }
	
	    return result;
	},

	getUnmodifiedSince: function() {
		return this.unmodifiedSince;
	},

	hasSome: function() {
		return (((this.match != null) && !this.match.isEmpty())
				|| ((this.noneMatch != null) && !this.noneMatch.isEmpty())
				|| (this.getModifiedSince() != null) || (this.getUnmodifiedSince() != null));
	},

	hasSomeRange: function() {
		return this.getRangeTag() != null || this.getRangeDate() != null;
	},

	setMatch: function(tags) {
		this.match = tags;
	},

	setModifiedSince: function(date) {
		//TODO: unmodifiable date
		this.modifiedSince = date;
	},

	setNoneMatch: function(tags) {
		this.noneMatch = tags;
	},

	setRangeDate: function(rangeDate) {
		this.rangeDate = rangeDate;
	},

	setRangeTag: function(rangeTag) {
		this.rangeTag = rangeTag;
	},

	setUnmodifiedSince: function(date) {
		//TODO: unmodifiable date
		this.unmodifiedSince = date;
	}
});

var Dimension = new commons.Class({});

Dimension.extend({
	AUTHORIZATION: "authorization",
	CHARACTER_SET: "character_set",
	CLIENT_ADDRESS: "client_address",
	CLIENT_AGENT: "client_agent",
	UNSPECIFIED: "unspecified",
	ENCODING: "encoding",
	LANGUAGE: "language",
	MEDIA_TYPE: "media_type",
	TIME: "time"
});

var Disposition = new commons.Class({
    initialize: function(type, parameters) {
        this.type = type;
        this.parameters = parameters;
    },

    addDate: function(name, value) {
        this.getParameters().add(name,
                DateUtils.format(value, DateUtils.FORMAT_RFC_822.get(0)));
    },

    getFilename: function() {
        return this.getParameters().getFirstValue(Disposition.NAME_FILENAME, true);
    },

    getParameters: function() {
        if (this.parameters == null) {
            this.parameters = new util.Series();
        }

        return this.parameters;
    },

    getType: function() {
        return this.type;
    },

    setCreationDate: function(value) {
        this.setDate(Disposition.NAME_CREATION_DATE, value);
    },

    setDate: function(name, value) {
        this.getParameters().set(name,
                DateUtils.format(value, DateUtils.FORMAT_RFC_822.get(0)), true);
    },

    setFilename: function(fileName) {
        this.getParameters().set(Disposition.NAME_FILENAME, fileName, true);
    },

    setModificationDate: function(value) {
        this.setDate(Disposition.NAME_MODIFICATION_DATE, value);
    },

    setParameters: function(parameters) {
        this.parameters = parameters;
    },

    setReadDate: function(value) {
        this.setDate(Disposition.NAME_READ_DATE, value);
    },

    setSize: function(size) {
        this.getParameters().set(Disposition.NAME_SIZE, size.toString(), true);
    },

    setType: function(type) {
        this.type = type;
    }

});

Disposition.extend({
    NAME_CREATION_DATE: "creation-date",
    NAME_FILENAME: "filename",
    NAME_MODIFICATION_DATE: "modification-date",
    NAME_READ_DATE: "read-date",
    NAME_SIZE: "size",
    TYPE_ATTACHMENT: "attachment",
    TYPE_INLINE: "inline",
    TYPE_NONE: "none"
});

var Parameter = new commons.Class({
	initialize: function(name, value) {
		this.name = name;
		this.value = value;
	},
	getName: function() {
		return this.name;
	},
	setName: function(name) {
		this.name = name;
	},
	getValue: function() {
		return this.value;
	},
	setValue: function(value) {
		this.value = value;
	},

	compareTo: function(o) {
        return this.getName().compareTo(o.getName());
    },

	encode: function() {
		if (arguments.length==1) {
			this._encodeTwoParams(arguments[0]);
		} else if (arguments.length==2) {
			this._encodeTwoParams(arguments[0], arguments[1]);
		}
	},

    _encodeTwoParams: function(buffer, characterSet) {
        if (this.getName() != null) {
            buffer.append(Reference.encode(getName(), characterSet));

            if (this.getValue() != null) {
                buffer.append('=');
                buffer.append(Reference.encode(this.getValue(), characterSet));
            }
        }
    },

    _encodeOneParam: function(characterSet) {
        var sb = new commons.StringBuilder();
        this._encodeTwoParams(sb, characterSet);
        return sb.toString();
    },

    equals: function(obj) {
        // if obj == this no need to go further
        var result = (obj == this);

        if (!result) {
            result = obj instanceof Parameter;

            // if obj isn't a parameter or is null don't evaluate further
            if (result) {
                var that = obj;
                result = (((that.getName() == null) && (this.getName() == null)) || ((this.getName() != null) && this.getName()
                        .equals(that.getName())));

                // if names are both null or equal continue
                if (result) {
                    result = (((that.getValue() == null) && (this.getValue() == null)) || ((this.getValue() != null) && this.getValue()
                            .equals(that.getValue())));
                }
            }
        }

        return result;
    }
});

Parameter.extend({
	create: function(name, value) {
	    if (value != null) {
	        return new Parameter(name.toString(), value.toString());
	    } else {
	        return new Parameter(name.toString(), null);
	    }
	}
});

 exports.Parameter = Parameter;

var Metadata = new commons.Class({
	initialize: function(name, description) {
		if (description==null) {
			description = "Encoding applied to a representation";
		}
        this.name = name;
        this.description = description;
    },
    getName: function() {
    	return this.name;
    },
    getDescription: function() {
    	return this.description;
    },
    toString: function() {
    	return this.getName();
    }
});


var Encoding = new commons.Class(Metadata, {
	initialize: function(name, description) {
		this.callSuperCstr(name, description);
		/*if (description==null) {
			description = "Encoding applied to a representation";
		}
        this.name = name;
        this.description = description;*/
	},

    equals: function(object) {
        return (object instanceof Encoding)
                && this.getName().equalsIgnoreCase(object.getName());
    },

    getParent: function() {
        return this.equals(Encoding.ALL) ? null : Encoding.ALL;
    },

    includes: function(included) {
        return this.equals(Encoding.ALL) || (included == null) || this.equals(included);
    }
});
Encoding.extend({
    /** All encodings acceptable. */
    ALL: new Encoding("*", "All encodings"),
    /** The common Unix file compression. */
    COMPRESS: new Encoding("compress",
            	"Common Unix compression"),
    /** The zlib format defined by RFC 1950 and 1951. */
    DEFLATE: new Encoding("deflate",
            "Deflate compression using the zlib format"),
    FREEMARKER: new Encoding("freemarker",
            "FreeMarker templated representation"),
    /** The GNU Zip encoding. */
    GZIP: new Encoding("gzip", "GZip compression"),
    /** The default (identity) encoding. */
    IDENTITY: new Encoding("identity",
            "The default encoding with no transformation"),
    /** The Velocity encoding. */
    VELOCITY: new Encoding("velocity",
            "Velocity templated representation"),
    /** The Info-Zip encoding. */
    ZIP: new Encoding("zip", "Zip compression"),
    valueOf: function(name) {
        var result = null;

        if ((name != null) && !name.equals("")) {
            if (name.equalsIgnoreCase(Encoding.ALL.getName())) {
                result = Encoding.ALL;
            } else if (name.equalsIgnoreCase(Encoding.GZIP.getName())) {
                result = Encoding.GZIP;
            } else if (name.equalsIgnoreCase(Encoding.ZIP.getName())) {
                result = Encoding.ZIP;
            } else if (name.equalsIgnoreCase(Encoding.COMPRESS.getName())) {
                result = Encoding.COMPRESS;
            } else if (name.equalsIgnoreCase(Encoding.DEFLATE.getName())) {
                result = Encoding.DEFLATE;
            } else if (name.equalsIgnoreCase(Encoding.IDENTITY.getName())) {
                result = Encoding.IDENTITY;
            } else if (name.equalsIgnoreCase(Encoding.FREEMARKER.getName())) {
                result = Encoding.FREEMARKER;
            } else if (name.equalsIgnoreCase(Encoding.VELOCITY.getName())) {
                result = Encoding.VELOCITY;
            } else {
                result = new Encoding(name);
            }
        }

        return result;
    }
});

var Expectation = new commons.Class({
    initialize: function(name, value) {
        this.name = name;
        this.value = value;
        this.parameters = [];
    },

    equals: function(obj) {
        // if obj == this no need to go further
        var result = (obj == this);

        if (!result) {
            result = obj instanceof Expectation;

            // if obj isn't an expectation or is null don't evaluate further
            if (result) {
                var that = obj;
                result = (((that.getName() == null) && (this.getName() == null)) || ((this.getName() != null) && this.getName()
                        .equals(that.getName())));

                // if names are both null or equal continue
                if (result) {
                    result = (((that.getValue() == null) && (this.getValue() == null)) || ((this.getValue() != null) && this.getValue()
                            .equals(that.getValue())));

                    if (result) {
                        result = this.getParameters().equals(that.getParameters());
                    }
                }
            }
        }

        return result;
    },

    getName: function() {
        return this.name;
    },

    getParameters: function() {
        return this.parameters;
    },

    getValue: function() {
        return this.value;
    },

    setName: function(name) {
        this.name = name;
    },

    setParameters: function(parameters) {
    	this.parameters = parameters;
    },

    setValue: function(value) {
        this.value = value;
    },

    toString: function() {
        return "Expectation [name=" + this.name + ", parameters=" + this.parameters
                + ", value=" + this.value + "]";
    }
});

Expectation.extend({
	continueResponse: function() {
		return new Expectation("100-continue");
	    //return new Expectation(core.HeaderConstants.EXPECT_CONTINUE);
	}
});

var Form = new commons.Class(util.Series, {
	initialize: function() {
		if (arguments.length==0) {
			this.callSuperCstr();
		} else if (arguments.length>=1) {
			this.callSuperCstr();
			var parametersString = arguments[0];
			var characterSet = CharacterSet.UTF_8;
			var decode = true;
			var separator = '&';
			if (arguments.length>=2) {
				characterSet = arguments[1];
			}
			if (arguments.length>=3) {
				decode = arguments[2];
			}
			if (arguments.length>=4) {
				separator = arguments[3];
			}
	        core.FormUtils.parse(this, parametersString, characterSet, decode, separator);
		}
	},

	createEntry: function(name, value) {
		return new Parameter(name, value);
	},

// [ifdef gwt] method uncomment
// @Override
// public Series<Parameter> createSeries(List<Parameter> delegate) {
// return new Form(delegate);
// }

	encode: function(characterSet, separator) {
		if (characterSet==null) {
			characterSet = CharacterSet.UTF_8;
		}
		if (separator==null) {
			separator = "&";
		}
		var sb = new commons.StringBuilder();

		for (var i = 0; i < this.size(); i++) {
			if (i > 0) {
				sb.append(separator);
			}

			this.get(i).encode(sb, characterSet);
		}

		return sb.toString();
	},

	getMatrixString: function(characterSet) {
		if (characterSet==null) {
			characterSet = CharacterSet.UTF_8;
		}

		try {
			return this.encode(characterSet, ';');
		} catch (err) {
			return null;
		}
	},

	getQueryString: function(characterSet) {
		if (characterSet==null) {
			characterSet = CharacterSet.UTF_8;
		}

		try {
			return this.encode(characterSet);
		} catch (err) {
			return null;
		}
	},

	getWebRepresentation: function(characterSet) {
		if (characterSet==null) {
			characterSet = CharacterSet.UTF_8;
		}

		return new StringRepresentation(this.getQueryString(characterSet),
				MediaType.APPLICATION_WWW_FORM, null, characterSet);
	}
});

var Language = new commons.Class(Metadata, {
    initialize: function(name, description) {
        if (description==null) {
        	description = "Language or range of languages";
        }
        this.callSuperCstr(name, description);
        this.subTags = null;
    },

    equals: function(object) {
        return (object instanceof Language)
                && this.getName().equalsIgnoreCase(object.getName());
    },

    getParent: function() {
        var result = null;

        if ((this.getSubTags() != null) && !this.getSubTags().isEmpty()) {
            result = Language.valueOf(this.getPrimaryTag());
        } else {
            result = this.equals(Language.ALL) ? null : Language.ALL;
        }

        return result;
    },

    getPrimaryTag: function() {
        var separator = this.getName().indexOf('-');

        if (separator == -1) {
            return this.getName();
        }

        return this.getName().substring(0, separator);
    },

    getSubTags: function() {
        if (this.subTags==null) {
        	this.subTags = [];
            if (this.getName() != null) {
                var tags = this.getName().split("-");
                var tokens = [];
                if (tags.length > 0) {
                    for (var i = 1; i < tags.length; i++) {
                        tokens.push(tags[i]);
                    }
                }
                this.subTags = tokens;
            }
        }
        return this.subTags;
    },

    includes: function(included) {
        var result = this.equals(Language.ALL) || (included == null) || this.equals(included);

        if (!result && (included instanceof Language)) {
            var includedLanguage = included;

            if (this.getPrimaryTag().equals(includedLanguage.getPrimaryTag())) {
                // Both languages are different
                if (this.getSubTags().equals(includedLanguage.getSubTags())) {
                    result = true;
                } else if (this.getSubTags().isEmpty()) {
                    result = true;
                }
            }
        }

        return result;
    }
});

Language.extend({
	/** All languages acceptable. */
	ALL: new Language("*", "All languages"),
	/** English language. */
	ENGLISH: new Language("en", "English language"),
	/** English language spoken in USA. */
	ENGLISH_US: new Language("en-us", "English language in USA"),
	/** French language. */
	FRENCH: new Language("fr", "French language"),
	/** French language spoken in France. */
	FRENCH_FRANCE: new Language("fr-fr", "French language in France"),
	/** Spanish language. */
	SPANISH: new Language("es", "Spanish language"),

	valueOf: function(name) {
		var result = null;

		if ((name != null) && !name.equals("")) {
			if (name.equalsIgnoreCase(Language.ALL.getName())) {
				result = Language.ALL;
			} else if (name.equalsIgnoreCase(Language.ENGLISH.getName())) {
				result = Language.ENGLISH;
			} else if (name.equalsIgnoreCase(Language.ENGLISH_US.getName())) {
				result = Language.ENGLISH_US;
			} else if (name.equalsIgnoreCase(Language.FRENCH.getName())) {
				result = Language.FRENCH;
			} else if (name.equalsIgnoreCase(Language.FRENCH_FRANCE.getName())) {
				result = Language.FRENCH_FRANCE;
			} else if (name.equalsIgnoreCase(Language.SPANISH.getName())) {
				result = Language.SPANISH;
			} else {
				result = new Language(name);
			}
		}

		return result;
	}
});

var Preference = new commons.Class({
	initialize: function(metadata, quality, parameters) {
        this.metadata = metadata;
        if (quality==null) {
        	this.quality = 1;
        } else {
        	this.quality = quality;
        }
        
        this.parameters = parameters;
	},

    getMetadata: function() {
        return this.metadata;
    },

    getParameters: function() {
        if (this.parameters == null) {
        	this.parameters = new util.Series();
        }
        return this.parameters;
    },

    getQuality: function() {
        return this.quality;
    },

    setMetadata: function(metadata) {
        this.metadata = metadata;
    },

    setParameters: function(parameters) {
        this.parameters = parameters;
    },

    setQuality: function(quality) {
        this.quality = quality;
    },

    toString: function() {
        return (this.getMetadata() == null) ? ""
                : (this.getMetadata().getName() + ":" + this.getQuality());
    }
});

var Range = new commons.Class({
	initialize: function(index, size) {
		if (index==null) {
			this.index = Range.INDEX_FIRST;
		} else {
			this.index = index;
		}
		
		if (size==null) {
			this.size = Range.SIZE_MAX;
		} else {
			this.size = size;
		}
	},

    equals: function(object) {
        return (object instanceof Range)
                && object.getIndex() == this.getIndex()
                && object.getSize() == this.getSize();
    },

    getIndex: function() {
        return this.index;
    },

    getSize: function() {
        return this.size;
    },

    isIncluded: function(position, totalSize) {
        var result = false;

        if (this.getIndex() == Range.INDEX_LAST) {
            // The range starts from the end
            result = (0 <= position) && (position < totalSize);

            if (result) {
                result = position >= (totalSize - this.getSize());
            }
        } else {
            // The range starts from the beginning
            result = position >= this.getIndex();

            if (result && (this.getSize() != Range.SIZE_MAX)) {
                result = position < this.getIndex() + this.getSize();
            }
        }

        return result;
    },

    setIndex: function(index) {
        this.index = index;
    },

    setSize: function(size) {
        this.size = size;
    }
});

Range.extend({
	INDEX_FIRST: 0,
    INDEX_LAST: -1,
	SIZE_MAX: -1
});

var RecipientInfo = new commons.Class({
	initialize: function(protocol, name, agent) {
        this.protocol = protocol;
        this.name = name;
        this.comment = agent;
    },

    getComment: function() {
        return this.comment;
    },

    getName: function() {
        return this.name;
    },

    getProtocol: function() {
        return this.protocol;
    },

    setComment: function(comment) {
        this.comment = comment;
    },

    setName: function(name) {
        this.name = name;
    },

    setProtocol: function(protocol) {
        this.protocol = protocol;
    }
});

var Tag = new commons.Class({
	initialize: function(opaqueTag, weak) {
		this.name = opaqueTag;
		if (weak==null) {
			this.weak = true;
		} else {
			this.weak = weak;
		}
	},

    equals: function(object, checkWeakness) {
    	if (checkWeakness==null) {
    		checkWeakness = true;
    	}
        var result = (object != null) && (object instanceof Tag);

        if (result) {
            var that = object;

            if (checkWeakness) {
                result = (that.isWeak() == this.isWeak());
            }

            if (result) {
                if (this.getName() == null) {
                    result = (that.getName() == null);
                } else {
                    result = this.getName().equals(that.getName());
                }
            }
        }

        return result;
    },

    format: function() {
        if (this.getName().equals("*")) {
            return "*";
        }

        var sb = new commons.StringBuilder();
        if (this.isWeak()) {
            sb.append("W/");
        }
        return sb.append('"').append(this.getName()).append('"').toString();
    },

    getName: function() {
        return this.name;
    },

    isWeak: function() {
        return this.weak;
    },

    toString: function() {
        return this.getName();
    }
});

Tag.extend({
    parse: function(httpTag) {
        var result = null;
        var weak = false;
        var httpTagCopy = httpTag;

        if (httpTagCopy.startsWith("W/")) {
            weak = true;
            httpTagCopy = httpTagCopy.substring(2);
        }

        if (httpTagCopy.startsWith("\"") && httpTagCopy.endsWith("\"")) {
            result = new Tag(
                    httpTagCopy.substring(1, httpTagCopy.length() - 1), weak);
        } else if (httpTagCopy.equals("*")) {
            result = new Tag("*", weak);
        } else {
            /*Context.getCurrentLogger().log(Level.WARNING,
                    "Invalid tag format detected: " + httpTagCopy);*/
        }

        return result;
    }
});

Tag.ALL = Tag.parse("*");


var Warning = new commons.Class({
    getAgent: function() {
        return this.agent;
    },

    getDate: function() {
        return this.date;
    },

    getStatus: function() {
        return this.status;
    },

    getText: function() {
        return this.text;
    },

    setAgent: function(agent) {
        this.agent = agent;
    },

    setDate: function(date) {
        this.date = date;
    },

    setStatus: function(status) {
        this.status = status;
    },

    setText: function(text) {
        this.text = text;
    }
});

var MediaType = new commons.Class(Metadata, {
	initialize: function(name, parameters, description) {
		if (description==null) {
			description = "Media type or range of media types";
		}
        this.callSuperCstr(MediaType.normalizeType(name, parameters), description);
    },

    equals: function(obj, ignoreParameters) {
    	if (ignoreParameters==null) {
    		ignoreParameters = false;
    	}
        var result = (obj == this);

        // if obj == this no need to go further
        if (!result) {
            // if obj isn't a mediatype or is null don't evaluate further
            if (obj instanceof MediaType) {
                var that = obj;
                if (this.getMainType().equals(that.getMainType())
                        && this.getSubType().equals(that.getSubType())) {
                    result = ignoreParameters
                            || this.getParameters().equals(that.getParameters());
                }
            }
        }

        return result;
    },

    getMainType: function() {
        var result = null;

        if (this.getName() != null) {
            var index = this.getName().indexOf('/');

            // Some clients appear to use name types without subtypes
            if (index == -1) {
                index = this.getName().indexOf(';');
            }

            if (index == -1) {
                result = this.getName();
            } else {
                result = this.getName().substring(0, index);
            }
        }

        return result;
    },

	getParameters: function() {
        if (this.parameters == null) {
            if (this.getName() != null) {
                var index = this.getName().indexOf(';');

                if (index != -1) {
                	this.parameters = new Form(this.getName().substring(index + 1)
                            .trim(), ';');
                }
            }
            
            if (this.parameters==null) {
            	this.parameters = new Form();
            }
        }
        return this.parameters;
    },

    getParent: function() {
        var result = null;

        if (this.getParameters().size() > 0) {
            result = MediaType.valueOf(this.getMainType() + "/" + this.getSubType());
        } else {
            if (this.getSubType().equals("*")) {
                result = this.equals(MediaType.ALL) ? null : MediaType.ALL;
            } else {
                result = MediaType.valueOf(this.getMainType() + "/*");
            }
        }

        return result;
    },

    getSubType: function() {
        var result = null;

        if (this.getName() != null) {
            var slash = this.getName().indexOf('/');

            if (slash == -1) {
                // No subtype found, assume that all subtypes are accepted
                result = "*";
            } else {
                var separator = this.getName().indexOf(';');
                if (separator == -1) {
                    result = this.getName().substring(slash + 1);
                } else {
                    result = this.getName().substring(slash + 1, separator);
                }
            }
        }

        return result;
    },

    includes: function(included) {
        var result = this.equals(MediaType.ALL) || this.equals(included);

        if (!result && (included instanceof MediaType)) {
            var includedMediaType = included;

            if (this.getMainType().equals(includedMediaType.getMainType())) {
                // Both media types are different
                if (this.getSubType().equals(includedMediaType.getSubType())) {
                    result = true;
                } else if (this.getSubType().equals("*")) {
                    result = true;
                } else if (this.getSubType().startsWith("*+")
                        && includedMediaType.getSubType().endsWith(
                        		this.getSubType().substring(2))) {
                    result = true;
                }
            }
        }

        return result;
    },

    isConcrete: function() {
        return !this.getName().contains("*");
    }
});

MediaType.extend({
    _types: null,
    _TSPECIALS: "()<>@,;:/[]?=\\\"",
    register: function(name, description) {
        if (MediaType.getTypes()[name]==null) {
            var type = new MediaType(name, null, description);
            MediaType.getTypes()[name] = type;
        }

        return MediaType.getTypes()[name];
	},

	valueOf: function(name) {
        var result = null;

        if ((name != null) && !name.equals("")) {
            result = MediaType.getTypes()[name];
            if (result == null) {
                result = new MediaType(name);
            }
        }

        return result;
    },

    getTypes: function() {
        if (MediaType._types == null) {
        	MediaType._types = {};
        }
        return MediaType._types;
    },

    getMostSpecific: function(mediaTypes) {
    	if ((mediaTypes == null) || (mediaTypes.length == 0)) {
    		throw new Error("You must give at least one MediaType");
    	}

    	if (mediaTypes.length == 1) {
    		return mediaTypes[0];
    	}

    	var mostSpecific = mediaTypes[0];

    	for (var i = 1; i < mediaTypes.length; i++) {
    		var mediaType = mediaTypes[i];

    		if (mediaType != null) {
    			if (mediaType.getMainType().equals("*")) {
    				continue;
    			}

    			if (mostSpecific.getMainType().equals("*")) {
    				mostSpecific = mediaType;
    				continue;
    			}

    			if (mostSpecific.getSubType().contains("*")) {
    				mostSpecific = mediaType;
    				continue;
    			}
    		}
    	}

    	return mostSpecific;
    }
});

MediaType.normalizeToken = function(token) {
    var length;
    var c;

    // Makes sure we're not dealing with a "*" token.
    token = token.trim();
    if ("".equals(token) || "*".equals(token))
        return "*";

    // Makes sure the token is RFC compliant.
    length = token.length;
    for (var i = 0; i < length; i++) {
        c = token.charAt(i);
        if (c <= 32 || c >= 127 || MediaType._TSPECIALS.indexOf(c) != -1)
            throw new Error("Illegal token: " + token);
    }

    return token;
};

MediaType.normalizeType = function(name, parameters) {
    var slashIndex;
    var colonIndex;
    var mainType;
    var subType;
    var params = null;

    // Ignore null names (backward compatibility).
    if (name == null)
        return null;

    // Check presence of parameters
    if ((colonIndex = name.indexOf(';')) != -1) {
        params = new commons.StringBuilder(name.substring(colonIndex));
        name = name.substring(0, colonIndex);
    }

    // No main / sub separator, assumes name/*.
    if ((slashIndex = name.indexOf('/')) == -1) {
        mainType = MediaType.normalizeToken(name);
        subType = "*";
    } else {
        // Normalizes the main and sub types.
        mainType = MediaType.normalizeToken(name.substring(0, slashIndex));
        subType = MediaType.normalizeToken(name.substring(slashIndex + 1));
    }

    // Merge parameters taken from the name and the method argument.
    if (parameters != null && !parameters.isEmpty()) {
        if (params == null) {
            params = new commons.StringBuilder();
        }
        var hw = new HeaderWriter();
        hw.appendObject = function(value) {
        	return this.appendExtension(value);
        };
        for (var i = 0; i < parameters.size(); i++) {
            var p = parameters.get(i);
            hw.appendParameterSeparator();
            hw.appendSpace();
            hw.appendObject(p);
        }
        params.append(hw.toString());
    }

    return (params == null) ? mainType + '/' + subType : mainType + '/'
            + subType + params.toString();
};

MediaType.ALL = MediaType.register("*/*", "All media");
MediaType.APPLICATION_JSON = MediaType.register("application/json", "");
MediaType.APPLICATION_JSONP = MediaType.register("application/jsonp", "");
MediaType.TEXT_JSON = MediaType.register("text/json", "");
MediaType.APPLICATION_XML = MediaType.register("application/xml", "");
MediaType.TEXT_XML = MediaType.register("text/xml", "");
MediaType.TEXT_HTML = MediaType.register("text/html", "");
MediaType.TEXT_PLAIN = MediaType.register("text/plain", "");
MediaType.TEXT_URI_LIST = MediaType.register("text/uri-list", "List of URIs");


var CharacterSet = new commons.Class(Metadata, {
	initialize: function(name, description) {
		if (name!=null) {
			name == name.toUpperCase();
		}
		if (description==null) {
			description = "Character set or range of character sets";
		}
		this.callSuperCstr(CharacterSet.getIanaName(name), description);
	},

	equals: function(object) {
        return (object instanceof CharacterSet)
                && this.getName()
                        .equalsIgnoreCase(object.getName());
    },

    getParent: function() {
        return this.equals(CharacterSet.ALL) ? null : CharacterSet.ALL;
    },

    includes: function(included) {
        return this.equals(CharacterSet.ALL) || (included == null) || equals(included);
    }
});

CharacterSet.getIanaName = function(name) {
    if (name != null) {
        name = name.toUpperCase();

        if (name.equalsIgnoreCase("MACROMAN")) {
            name = CharacterSet.MACINTOSH.getName();
        } else if (name.equalsIgnoreCase("ASCII")) {
            name = CharacterSet.US_ASCII.getName();
        } else if (name.equalsIgnoreCase("latin1")) {
            name = CharacterSet.ISO_8859_1.getName();
        } else if (name.equalsIgnoreCase("latin2")) {
            name = CharacterSet.ISO_8859_2.getName();
        } else if (name.equalsIgnoreCase("latin3")) {
            name = CharacterSet.ISO_8859_3.getName();
        } else if (name.equalsIgnoreCase("latin4")) {
            name = CharacterSet.ISO_8859_4.getName();
        } else if (name.equalsIgnoreCase("cyrillic")) {
            name = CharacterSet.ISO_8859_5.getName();
        } else if (name.equalsIgnoreCase("arabic")) {
            name = CharacterSet.ISO_8859_6.getName();
        } else if (name.equalsIgnoreCase("greek")) {
            name = CharacterSet.ISO_8859_7.getName();
        } else if (name.equalsIgnoreCase("hebrew")) {
            name = CharacterSet.ISO_8859_8.getName();
        } else if (name.equalsIgnoreCase("latin5")) {
            name = CharacterSet.ISO_8859_9.getName();
        } else if (name.equalsIgnoreCase("latin6")) {
            name = CharacterSet.ISO_8859_10.getName();
        }
    }

    return name;
};

CharacterSet.ALL = new CharacterSet("*", "All character sets");
CharacterSet.ISO_8859_1 = new CharacterSet("ISO-8859-1", "ISO/IEC 8859-1 or Latin 1 character set");
CharacterSet.ISO_8859_2 = new CharacterSet("ISO-8859-2", "ISO/IEC 8859-2 or Latin 2 character set");
CharacterSet.ISO_8859_3 = new CharacterSet("ISO-8859-3", "ISO/IEC 8859-3 or Latin 3 character set");
CharacterSet.ISO_8859_4 = new CharacterSet("ISO-8859-4", "ISO/IEC 8859-4 or Latin 4 character set");
CharacterSet.ISO_8859_5 = new CharacterSet("ISO-8859-5", "ISO/IEC 8859-5 or Cyrillic character set");
CharacterSet.ISO_8859_6 = new CharacterSet("ISO-8859-6", "ISO/IEC 8859-6 or Arabic character set");
CharacterSet.ISO_8859_7 = new CharacterSet("ISO-8859-7", "ISO/IEC 8859-7 or Greek character set");
CharacterSet.ISO_8859_8 = new CharacterSet("ISO-8859-8", "ISO/IEC 8859-8 or Hebrew character set");
CharacterSet.ISO_8859_9 = new CharacterSet("ISO-8859-9", "ISO/IEC 8859-9 or Latin 5 character set");
CharacterSet.ISO_8859_10 = new CharacterSet("ISO-8859-10", "ISO/IEC 8859-10 or Latin 6 character set");
CharacterSet.MACINTOSH = new CharacterSet("macintosh", "Mac OS Roman character set");
CharacterSet.US_ASCII = new CharacterSet("US-ASCII", "US ASCII character set");
CharacterSet.UTF_16 = new CharacterSet("UTF-16", "UTF 16 character set");
CharacterSet.UTF_8 = new CharacterSet("UTF-8", "UTF 8 character set");
CharacterSet.WINDOWS_1252 = new CharacterSet("windows-1252", "Windows 1232 character set");

CharacterSet.valueOf = function(name) {
    var result = null;
    name = CharacterSet.getIanaName(name);

    if ((name != null) && !name.equals("")) {
        if (name.equalsIgnoreCase(CharacterSet.ALL.getName())) {
            result = CharacterSet.ALL;
        } else if (name.equalsIgnoreCase(CharacterSet.ISO_8859_1.getName())) {
            result = CharacterSet.ISO_8859_1;
        } else if (name.equalsIgnoreCase(CharacterSet.US_ASCII.getName())) {
            result = CharacterSet.US_ASCII;
        } else if (name.equalsIgnoreCase(CharacterSet.UTF_8.getName())) {
            result = CharacterSet.UTF_8;
        } else if (name.equalsIgnoreCase(CharacterSet.UTF_16.getName())) {
            result = CharacterSet.UTF_16;
        } else if (name.equalsIgnoreCase(CharacterSet.WINDOWS_1252.getName())) {
            result = CharacterSet.WINDOWS_1252;
        } else if (name.equalsIgnoreCase(CharacterSet.MACINTOSH.getName())) {
            result = CharacterSet.MACINTOSH;
        } else {
            result = new CharacterSet(name);
        }
    }

    return result;
};

module.exports = {
	Protocol: Protocol,
	ClientInfo: ClientInfo,
	ServerInfo: ServerInfo,
	Reference: Reference,
	Method: Method,
	Status: Status,
	CacheDirective: CacheDirective,
	Cookie: Cookie,
	CookieSetting: CookieSetting,
	Conditions: Conditions,
	Dimension: Dimension,
	Disposition: Disposition,
	Parameter: Parameter,
	Metadata: Metadata,
	Encoding: Encoding,
	Form: Form,
	Language: Language,
	Preference: Preference,
	Range: Range,
	RecipientInfo: RecipientInfo,
	Tag: Tag,
	Warning: Warning,
	MediaType: MediaType,
	Expectation: Expectation,
	CharacterSet: CharacterSet,
};