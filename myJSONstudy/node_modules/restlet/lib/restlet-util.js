var core = require("./restlet-core.js");
var data = require("./restlet-data.js");

var commons = require("./commons.js");

var Resolver = new commons.Class({
    resolve: function(name) {
    	throw new Error("Must be implemented!");
    }
});

Resolver.extend({
    createResolver: function(map) {
    	if (arguments.length==1) {
    		var map = arguments[0];
    		return new MapResolver(map);
    	} else if (arguments.length==2) {
    		var request = arguments[0];
    		var response = arguments[1];
            return new CallResolver(request, response);
    	}
    }
});

var Series = new commons.Class({
	initialize: function() {
		this.array = [];
	},

	// Specific method for JS
	getElements: function() {
		return this.array;
	},
	
	get: function(i) {
		return this.array[i];
	},
	
	size: function() {
		return this.array.length;
	},
	
	isEmpty: function() {
		return (this.size()==0);
	},
	
	add: function() {
		if (arguments.length==1) {
			return this.array.push(arguments[0]);
		} else if (arguments.length==2) {
			var name = arguments[0];
			var value = arguments[1];
			return this.array.push(this.createEntry(name, value));
		} else {
			throw new Error("The number of arguments isn't correct.");
		}
	},

	createEntry: function(name, value) {
		return new data.Parameter(name, value);
	},
	
	equals: function(value1, value2, ignoreCase) {
		var result = (value1 == value2);

		if (!result) {
			if ((value1 != null) && (value2 != null)) {
				if (ignoreCase) {
					result = value1.equalsIgnoreCase(value2);
				} else {
					result = value1.equals(value2);
				}
			}
		}

		return result;
	},

	getFirst: function(name, ignoreCase) {
		if (ignoreCase==null) {
			ignoreCase = false;
		}

		if (this.array!=null) {
			for (var i=0; i<this.array.length; i++) {
				var param = this.array[i];
				if (this.equals(param.getName(), name, ignoreCase)) {
					return param;
				}
			}
		}

		return null;
	},

	getFirstValue: function() {
		var name = arguments[0];
		var ignoreCase= false;
		var defaultValue = null;
		if (arguments.length==2 && typeof arguments[1] == "string") {
			defaultValue = arguments[1];
		} else if (arguments.length==2) {
			ignoreCase = arguments[1]
		}

		var result = defaultValue;
		var param = this.getFirst(name, ignoreCase);

		if ((param != null) && (param.getValue() != null)) {
			result = param.getValue();
		}

		return result;
	},

	//public String getFirstValue(String name, String defaultValue) {

	getNames: function() {
		var result = [];

		for (var i=0; i<this.array.length; i++) {
			var param = this.array[i];
			result.push(param.getName());
		}

		return result;
	},

	getValues: function(name, separator, ignoreCase) {
		if (separator==null) {
			separator = ",";
		}
		if (ignoreCase==null) {
			ignoreCase = true;
		}
		var result = null;
		var sb = null;

		for (var i=0; i<this.array.length; i++) {
			var param = this.array[i];
			if ((ignoreCase && param.getName().equalsIgnoreCase(name))
					|| param.getName().equals(name)) {
				if (sb == null) {
					if (result == null) {
						result = param.getValue();
					} else {
						sb = new commons.StringBuilder();
						sb.append(result).append(separator)
								.append(param.getValue());
					}
				} else {
					sb.append(separator).append(param.getValue());
				}
			}
		}

		if (sb != null) {
			result = sb.toString();
		}

		return result;
	},

	getValuesArray: function() {
		var name = arguments[0];
		var ignoreCase= false;
		var defaultValue = null;
		if (arguments.length==2 && typeof arguments[1] == "string") {
			defaultValue = arguments[1];
		} else if (arguments.length==2) {
			ignoreCase = arguments[1]
		}

		var result = null;
		var params = this.subList(name, ignoreCase);

		if ((params.size() == 0) && (defaultValue != null)) {
			result = [];
			result.push(defaultValue);
		} else {
			result = [];

			for (var i = 0; i < params.length; i++) {
				result.push(params.get[i].getValue());
			}
		}

		return result;
	},

	getValuesMap: function() {
		var result = {};

		for (var i=0; i<this.array.length; i++) {
			var param = this.array[i];
			if (!result[param.getName()]) {
				result[param.getName()] = param.getValue();
			}
		}

		return result;
	},

	removeAll: function(name, ignoreCase) {
		if (ignoreCase==null) {
			ignoreCase = false;
		}

		var changed = false;
		var param = null;

		for (var i=0; i<this.array.length; i++) {
			var param = this.array[i];
			if (this.equals(param.getName(), name, ignoreCase)) {
				this.array.splice(i, i);
				i--;
				changed = true;
			}
		}

		return changed;
	},

	removeFirst: function(name, ignoreCase) {
		if (ignoreCase==null) {
			ignoreCase = false;
		}
		var changed = false;
		var param = null;

		for (var i=0; i<this.array.length && !changed; i++) {
			param = this.array[i];
			if (this.equals(param.getName(), name, ignoreCase)) {
				this.array.splice(i, i);
				i--;
				changed = true;
			}
		}

		return changed;
	},

	set: function(name, value, ignoreCase) {
		if (ignoreCase==null) {
			ignoreCase = false;
		}
		var result = null;
		var param = null;
		var found = false;

		for (var i=0; i<this.array.length; i++) {
			param = this.array[i];
			if (this.equals(param.getName(), name, ignoreCase)) {
				if (found) {
					// Remove other entries with the same name
					this.array.splice(i, i);
					i--;
				} else {
					// Change the value of the first matching entry
					found = true;
		        	for (var elt in param) {
		        		console.log("- elt = "+elt);
		        	}
					param.setValue(value);
					result = param;
				}
			}
		}

		if (!found) {
			this.add(name, value);
		}

		return result;
		
	},

	subList: function(name, ignoreCase) {
		if (ignoreCase==null) {
			ignoreCase = false;
		}

		var result = [];

		for (var i=0; i<this.array.length; i++) {
			var param = this.array[i];
			if (this.equals(param.getName(), name, ignoreCase)) {
				result.add(param);
			}
		}

		return result;
	}

});

var ClientList = new commons.Class(Array, {
    initialize: function(context) {
        this.context = context;
    },

    addClient: function(client) {
        // Set the client's context, if the client does not have already one.
        if (client.getContext() == null) {
            client.setContext(this.getContext().createChildContext());
        }

        return this.add(client);
    },

    addProtocol: function(protocol) {
        var result = new core.Client(protocol);
        result.setContext(this.getContext().createChildContext());
        this.add(result);
        return result;
    },

    getContext: function() {
        return this.context;
    },

    setContext: function(context) {
        this.context = context;
    }
});


var RouteList = new commons.Class(Array, {
    initialize: function(delegate) {
    	this.delegate = delegate;
        this.lastIndex = -1;
    },

    /*public RouteList() {
        super(new CopyOnWriteArrayList<Route>());
        this.lastIndex = -1;
    }

    public RouteList(List<Route> delegate) {
        super(new CopyOnWriteArrayList<Route>(delegate));
        this.lastIndex = -1;
    }*/

    getBest: function(request, response, requiredScore) {
        var result = null;
        var bestScore = 0;
        var score;

        for (var i=0; i<this.length; i++) {
        	var current = this[i]
            score = current.score(request, response);

            if ((score > bestScore) && (score >= requiredScore)) {
                bestScore = score;
                result = current;
            }
        }

        return result;
    },

    getFirst: function(request, response, requiredScore) {
        for (var i=0; i<this.length; i++) {
        	var current = this[i]
            if (current.score(request, response) >= requiredScore) {
                return current;
            }
        }

        // No match found
        return null;
    },

    getLast: function(request, response, requiredScore) {
        for (var j = this.size() - 1; (j >= 0); j--) {
            var route = this.get(j);
            if (route.score(request, response) >= requiredScore) {
                return route;
            }
        }

        // No match found
        return null;
    },

    getNext: function(request, response, requiredScore) {
        if (!this.isEmpty()) {
            for (var initialIndex = this.lastIndex++; initialIndex != this.lastIndex; this.lastIndex++) {
                if (this.lastIndex >= this.size()) {
                    this.lastIndex = 0;
                }

                var route = this.get(this.lastIndex);
                if (route.score(request, response) >= requiredScore) {
                    return route;
                }
            }
        }

        // No match found
        return null;
    },

    getRandom: function(request, response, requiredScore) {
        var length = this.size();

        if (length > 0) {
            var j = new Random().nextInt(length);
            var route = this.get(j);

            if (route.score(request, response) >= requiredScore) {
                return route;
            }

            var loopedAround = false;

            do {
                if ((j == length) && (loopedAround == false)) {
                    j = 0;
                    loopedAround = true;
                }

                route = this.get(j++);

                if (route.score(request, response) >= requiredScore) {
                    return route;
                }
            } while ((j < length) || !loopedAround);
        }

        // No match found
        return null;
    },

    removeAll: function(target) {
        for (var i = this.size() - 1; i >= 0; i--) {
            if (this.get(i).getNext() == target) {
                this.remove(i);
            }
        }
    },

    subList: function(fromIndex, toIndex) {
        return new RouteList(this.getDelegate().subList(fromIndex, toIndex));
    }
});

var ServerList = new commons.Class(Array, {
    initialize: function(context, next) {
        //super(new CopyOnWriteArrayList<Server>());
        this.context = context;
        this.next = next;
    },

    addProtocol: function() {
    	var protocol = null;
    	var address = null;
    	var port = -1;
    	if (arguments.length==1) {
    		protocol = arguments[0];
    		port = protocol.getDefaultPort();
    	} else if (arguments.length==2) {
    		protocol = arguments[0];
    		port = arguments[1];
    	} else if (arguments.length==3) {
    		protocol = arguments[0];
    		address = arguments[1];
    		port = arguments[2];
    	}
        var result = new core.Server(protocol, address, port, this.getNext());
        this.add(result);
        return result;
    },

    addServer: function(server) {
        // Set the server's context, if the server does not have already one.
        if (server.getContext() == null) {
            server.setContext(getContext().createChildContext());
        }

        server.setNext(this.getNext());
        return this.add(server);
    },

    getContext: function() {
        return this.context;
    },

    getNext: function() {
        return this.next;
    },

    setContext: function(context) {
        this.context = context;
    },

    setNext: function(next) {
        this.next = next;
    }
});

var ServiceList = new commons.Class(Array, {
    initialize: function(context) {
        //super(new CopyOnWriteArrayList<Service>());
        this.context = context;
    },

    add: function() {
    	var service = null;
    	var index = null;
    	if (arguments.length==1) {
    		service = arguments[0];
    	} else if (arguments.length==2) {
    		index = arguments[0];
    		service = arguments[1];
    	}
        service.setContext(this.getContext());
        
        if (index!=null) {
        	this.callSuper("add", index, service);
        } else {
            this.callSuper("add", service);
        }
    },

    addAll: function() {
    	var services = null;
    	var index = null;
    	if (arguments.length==1) {
    		services = arguments[0];
    	} else if (arguments.length==2) {
    		index = arguments[0];
    		services = arguments[1];
    	}

    	if (services != null) {
            for (var i=0; i<this.length; i++) {
            	var service = this[i];
                service.setContext(this.getContext());
            }
        }

    	if (index!=null) {
            return this.callSuper("addAll", index, services);
    	} else {
            return this.callSuper("addAll", services);
    	}
    },

    get: function(clazz) {
        for (var i=0; i<this.length; i++) {
        	var service = this[i];
            if (service instanceof clazz) {
                return service;
            }
        }

        return null;
    },

    getContext: function() {
        return this.context;
    },

    set: function(param) {
    	if (param instanceof ServiceList) {
    		this.setForServices(param);
    	} else {
    		this.setForService(param);
    	}
    },

    setForServices: function(services) {
        this.clear();

        if (services != null) {
            this.addAll(services);
        }
    },

    setForService: function(newService) {
        var services = [];
        var service;
        var replaced = false;

        for (var i = 0; (i < size()); i++) {
            service = this.get(i);

            if (service != null) {
                if (service.getClass().isAssignableFrom(newService.getClass())) {
                    try {
                        service.stop();
                    } catch (err) {
                        core.Context.getCurrentLogger().log(core.Level.WARNING,
                                "Unable to stop service replaced", err);
                    }

                    services.add(newService);
                    replaced = true;
                } else {
                    services.add(service);
                }
            }
        }

        if (!replaced) {
            services.add(newService);
        }

        this.set(services);
    },

    setContext: function(context) {
        this.context = context;

        for (var i=0; i<this.length; i++) {
        	var service = this[i];
            service.setContext(context);
        }
    },

    start: function() {
        for (var i=0; i<this.length; i++) {
        	var service = this[i];
            service.start();
        }
    },

    stop: function() {
        for (var i=0; i<this.length; i++) {
        	var service = this[i];
            service.stop();
        }
    }
});

module.exports = {
	Resolver: Resolver,
	Series: Series,
	ClientList: ClientList,
	RouteList: RouteList,
	ServerList: ServerList,
	ServiceList: ServiceList
};